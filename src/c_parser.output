Terminals unused in grammar

   AUTO
   STRUCT
   BREAK
   LONG
   SWITCH
   CASE
   ENUM
   REGISTER
   TYPEDEF
   EXTERN
   UNION
   CONST
   FLOAT
   SHORT
   UNSIGNED
   CONTINUE
   SIGNED
   DEFAULT
   GOTO
   VOLATILE
   STATIC
   THREE_DOTS
   HASH
   HASH_HASH


State 51 conflicts: 1 reduce/reduce
State 194 conflicts: 1 shift/reduce
State 216 conflicts: 1 shift/reduce
State 223 conflicts: 1 shift/reduce
State 241 conflicts: 24 reduce/reduce
State 257 conflicts: 24 reduce/reduce
State 261 conflicts: 24 reduce/reduce
State 263 conflicts: 24 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: fn_declaration
    2        | declaration
    3        | fn_prototype
    4        | program fn_declaration
    5        | program declaration
    6        | program fn_prototype

    7 CONSTANT: FLOATING_CONST
    8         | INTEGER_CONST
    9         | CHAR_CONST

   10 type_name: INT
   11          | DOUBLE
   12          | CHAR

   13 declaration: INT init_declarator_list SEMI_COLON
   14            | INT SEMI_COLON

   15 init_declarator_list: init_declarator
   16                     | init_declarator_list COMMA init_declarator

   17 init_declarator: declarator
   18                | declarator EQUALS initializer

   19 declarator: direct_declarator
   20           | pointer direct_declarator

   21 direct_declarator: IDENTIFIER
   22                  | LBRACKET declarator RBRACKET
   23                  | direct_declarator LSQUARE constant_expression RSQUARE
   24                  | direct_declarator LSQUARE RSQUARE

   25 pointer: MULT
   26        | pointer MULT

   27 initializer: expression
   28            | LCURLY initializer_list RCURLY
   29            | LCURLY initializer_list COMMA RCURLY

   30 initializer_list: initializer
   31                 | initializer_list COMMA initializer

   32 primary_expression: IDENTIFIER
   33                   | CONSTANT
   34                   | STRING_LITERAL
   35                   | LBRACKET expression RBRACKET

   36 postfix_expression: primary_expression
   37                   | postfix_expression LSQUARE expression RSQUARE
   38                   | bracketed_identifier LBRACKET argument_expression_list RBRACKET
   39                   | bracketed_identifier LBRACKET RBRACKET
   40                   | postfix_expression DOT IDENTIFIER
   41                   | postfix_expression PTR_OP IDENTIFIER
   42                   | postfix_expression PLUS_PLUS
   43                   | postfix_expression MINUS_MINUS

   44 argument_expression_list: expression
   45                         | argument_expression_list COMMA expression

   46 unary_expression: postfix_expression
   47                 | PLUS_PLUS unary_expression
   48                 | MINUS_MINUS unary_expression
   49                 | UNARY_OPERATOR cast_expression
   50                 | MULT cast_expression
   51                 | BITWISE_AND cast_expression
   52                 | SIZEOF unary_expression
   53                 | SIZEOF LBRACKET INT RBRACKET

   54 UNARY_OPERATOR: PLUS
   55               | MINUS
   56               | WAVE
   57               | EXL_MARK

   58 cast_expression: unary_expression
   59                | LBRACKET type_name RBRACKET cast_expression

   60 multiplicative_expression: cast_expression
   61                          | multiplicative_expression MULT cast_expression
   62                          | multiplicative_expression DIV cast_expression
   63                          | multiplicative_expression PERCENT cast_expression

   64 additive_expression: multiplicative_expression
   65                    | additive_expression PLUS multiplicative_expression
   66                    | additive_expression MINUS multiplicative_expression

   67 shift_expression: additive_expression
   68                 | shift_expression LSHIFT additive_expression
   69                 | shift_expression RSHIFT additive_expression

   70 relational_expression: shift_expression
   71                      | relational_expression LOGICAL_LESS shift_expression
   72                      | relational_expression LOGICAL_MORE shift_expression
   73                      | relational_expression LESS_OR_EQUAL shift_expression
   74                      | relational_expression MORE_OR_EQUAL shift_expression

   75 equality_expression: relational_expression
   76                    | equality_expression LOGICAL_EQUALITY relational_expression
   77                    | equality_expression LOGICAL_INEQUALITY relational_expression

   78 and_expression: equality_expression
   79               | and_expression BITWISE_AND equality_expression

   80 exclusive_or_expression: and_expression
   81                        | exclusive_or_expression BITWISE_XOR and_expression

   82 inclusive_or_expression: exclusive_or_expression
   83                        | inclusive_or_expression BITWISE_OR exclusive_or_expression

   84 logical_and_expression: inclusive_or_expression
   85                       | logical_and_expression LOGICAL_AND inclusive_or_expression

   86 logical_or_expression: logical_and_expression
   87                      | logical_or_expression LOGICAL_OR logical_and_expression

   88 conditional_expression: logical_or_expression
   89                       | logical_or_expression Q_MARK expression COLON conditional_expression

   90 assignment_expression: conditional_expression
   91                      | unary_expression ASSIGNMENT_OPERATOR assignment_expression

   92 ASSIGNMENT_OPERATOR: EQUALS
   93                    | MULT_EQUALS
   94                    | DIV_EQUALS
   95                    | PERCENT_EQUALS
   96                    | PLUS_EQUALS
   97                    | MINUS_EQUALS
   98                    | LSHIFT_EQUALS
   99                    | RSHIFT_EQUALS
  100                    | AND_EQUALS
  101                    | XOR_EQUALS
  102                    | OR_EQUALS

  103 expression: assignment_expression

  104 expression_list: expression
  105                | expression_list COMMA expression

  106 constant_expression: conditional_expression

  107 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  108             | VOID IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  109             | INT pointer IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON

  110 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement
  111               | VOID IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement
  112               | INT pointer IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

  113 fn_params_list: INT declarator
  114               | fn_params_list COMMA INT declarator
  115               | %empty

  116 bracketed_identifier: IDENTIFIER
  117                     | LBRACKET bracketed_identifier RBRACKET

  118 loop: for_loop
  119     | while_loop
  120     | do_while_loop

  121 do_while_loop: DO compound_statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON
  122              | DO statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON

  123 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET compound_statement
  124         | FOR LBRACKET for_loop_decl_statement RBRACKET statement

  125 for_loop_decl_statement: expression_list SEMI_COLON expression_list SEMI_COLON expression_list
  126                        | expression_list SEMI_COLON expression_list SEMI_COLON
  127                        | expression_list SEMI_COLON SEMI_COLON expression_list
  128                        | SEMI_COLON expression_list SEMI_COLON expression_list
  129                        | expression_list SEMI_COLON SEMI_COLON
  130                        | SEMI_COLON SEMI_COLON expression_list
  131                        | SEMI_COLON expression_list SEMI_COLON
  132                        | SEMI_COLON SEMI_COLON

  133 while_loop: WHILE LBRACKET expression_list RBRACKET compound_statement
  134           | WHILE LBRACKET expression_list RBRACKET statement

  135 if_block_statement: if_statement
  136                   | if_statement else_statement_list

  137 else_statement_list: else_statement
  138                    | else_statement_list else_statement

  139 if_statement: IF LBRACKET expression_list RBRACKET compound_statement
  140             | IF LBRACKET expression_list RBRACKET statement

  141 else_statement: ELSE compound_statement
  142               | ELSE statement

  143 compound_statement: LCURLY declaration_list statement_list RCURLY
  144                   | LCURLY statement_list RCURLY
  145                   | LCURLY declaration_list RCURLY
  146                   | LCURLY RCURLY

  147 declaration_list: declaration
  148                 | declaration_list declaration

  149 statement_list: statement
  150               | statement_list statement

  151 statement: loop
  152          | if_block_statement
  153          | expression_statement
  154          | semi_colon_statement
  155          | compound_statement

  156 expression_statement: expression_list SEMI_COLON

  157 semi_colon_statement: return_statement
  158                     | SEMI_COLON

  159 return_statement: RETURN expression SEMI_COLON
  160                 | RETURN SEMI_COLON


Terminals, with rules where they appear

$end (0) 0
error (256)
AUTO (258)
DOUBLE (259) 11
INT (260) 10 13 14 53 107 109 110 112 113 114
STRUCT (261)
BREAK (262)
ELSE (263) 141 142
LONG (264)
SWITCH (265)
CASE (266)
ENUM (267)
REGISTER (268)
TYPEDEF (269)
CHAR (270) 12
EXTERN (271)
RETURN (272) 159 160
UNION (273)
CONST (274)
FLOAT (275)
SHORT (276)
UNSIGNED (277)
CONTINUE (278)
FOR (279) 123 124
SIGNED (280)
VOID (281) 108 111
DEFAULT (282)
GOTO (283)
VOLATILE (284)
DO (285) 121 122
IF (286) 139 140
STATIC (287)
WHILE (288) 121 122 133 134
LSQUARE (289) 23 24 37
RSQUARE (290) 23 24 37
LBRACKET (291) 22 35 38 39 53 59 107 108 109 110 111 112 117 121 122
    123 124 133 134 139 140
RBRACKET (292) 22 35 38 39 53 59 107 108 109 110 111 112 117 121 122
    123 124 133 134 139 140
LCURLY (293) 28 29 143 144 145 146
RCURLY (294) 28 29 143 144 145 146
THREE_DOTS (295)
DOT (296) 40
PTR_OP (297) 41
PLUS_PLUS (298) 42 47
MINUS_MINUS (299) 43 48
SIZEOF (300) 52 53
LSHIFT (301) 68
RSHIFT (302) 69
LESS_OR_EQUAL (303) 73
MORE_OR_EQUAL (304) 74
LOGICAL_EQUALITY (305) 76
LOGICAL_INEQUALITY (306) 77
LOGICAL_AND (307) 85
LOGICAL_OR (308) 87
Q_MARK (309) 89
COLON (310) 89
MULT_EQUALS (311) 93
DIV_EQUALS (312) 94
PERCENT_EQUALS (313) 95
PLUS_EQUALS (314) 96
MINUS_EQUALS (315) 97
LSHIFT_EQUALS (316) 98
RSHIFT_EQUALS (317) 99
AND_EQUALS (318) 100
XOR_EQUALS (319) 101
OR_EQUALS (320) 102
COMMA (321) 16 29 31 45 105 114
HASH (322)
HASH_HASH (323)
SEMI_COLON (324) 13 14 107 108 109 121 122 125 126 127 128 129 130
    131 132 156 158 159 160
EQUALS (325) 18 92
BITWISE_OR (326) 83
BITWISE_AND (327) 51 79
BITWISE_XOR (328) 81
MULT (329) 25 26 50 61
PLUS (330) 54 65
MINUS (331) 55 66
WAVE (332) 56
EXL_MARK (333) 57
DIV (334) 62
PERCENT (335) 63
LOGICAL_MORE (336) 72
LOGICAL_LESS (337) 71
INTEGER_CONST (338) 8
FLOATING_CONST (339) 7
CHAR_CONST (340) 9
IDENTIFIER (341) 21 32 40 41 107 108 109 110 111 112 116
STRING_LITERAL (342) 34


Nonterminals, with rules where they appear

$accept (88)
    on left: 0
program (89)
    on left: 1 2 3 4 5 6, on right: 0 4 5 6
CONSTANT (90)
    on left: 7 8 9, on right: 33
type_name (91)
    on left: 10 11 12, on right: 59
declaration (92)
    on left: 13 14, on right: 2 5 147 148
init_declarator_list (93)
    on left: 15 16, on right: 13 16
init_declarator (94)
    on left: 17 18, on right: 15 16
declarator (95)
    on left: 19 20, on right: 17 18 22 113 114
direct_declarator (96)
    on left: 21 22 23 24, on right: 19 20 23 24
pointer (97)
    on left: 25 26, on right: 20 26 109 112
initializer (98)
    on left: 27 28 29, on right: 18 30 31
initializer_list (99)
    on left: 30 31, on right: 28 29 31
primary_expression (100)
    on left: 32 33 34 35, on right: 36
postfix_expression (101)
    on left: 36 37 38 39 40 41 42 43, on right: 37 40 41 42 43 46
argument_expression_list (102)
    on left: 44 45, on right: 38 45
unary_expression (103)
    on left: 46 47 48 49 50 51 52 53, on right: 47 48 52 58 91
UNARY_OPERATOR (104)
    on left: 54 55 56 57, on right: 49
cast_expression (105)
    on left: 58 59, on right: 49 50 51 59 60 61 62 63
multiplicative_expression (106)
    on left: 60 61 62 63, on right: 61 62 63 64 65 66
additive_expression (107)
    on left: 64 65 66, on right: 65 66 67 68 69
shift_expression (108)
    on left: 67 68 69, on right: 68 69 70 71 72 73 74
relational_expression (109)
    on left: 70 71 72 73 74, on right: 71 72 73 74 75 76 77
equality_expression (110)
    on left: 75 76 77, on right: 76 77 78 79
and_expression (111)
    on left: 78 79, on right: 79 80 81
exclusive_or_expression (112)
    on left: 80 81, on right: 81 82 83
inclusive_or_expression (113)
    on left: 82 83, on right: 83 84 85
logical_and_expression (114)
    on left: 84 85, on right: 85 86 87
logical_or_expression (115)
    on left: 86 87, on right: 87 88 89
conditional_expression (116)
    on left: 88 89, on right: 89 90 106
assignment_expression (117)
    on left: 90 91, on right: 91 103
ASSIGNMENT_OPERATOR (118)
    on left: 92 93 94 95 96 97 98 99 100 101 102, on right: 91
expression (119)
    on left: 103, on right: 27 35 37 44 45 89 104 105 159
expression_list (120)
    on left: 104 105, on right: 105 121 122 125 126 127 128 129 130
    131 133 134 139 140 156
constant_expression (121)
    on left: 106, on right: 23
fn_prototype (122)
    on left: 107 108 109, on right: 3 6
fn_declaration (123)
    on left: 110 111 112, on right: 1 4
fn_params_list (124)
    on left: 113 114 115, on right: 107 108 109 110 111 112 114
bracketed_identifier (125)
    on left: 116 117, on right: 38 39 117
loop (126)
    on left: 118 119 120, on right: 151
do_while_loop (127)
    on left: 121 122, on right: 120
for_loop (128)
    on left: 123 124, on right: 118
for_loop_decl_statement (129)
    on left: 125 126 127 128 129 130 131 132, on right: 123 124
while_loop (130)
    on left: 133 134, on right: 119
if_block_statement (131)
    on left: 135 136, on right: 152
else_statement_list (132)
    on left: 137 138, on right: 136 138
if_statement (133)
    on left: 139 140, on right: 135 136
else_statement (134)
    on left: 141 142, on right: 137 138
compound_statement (135)
    on left: 143 144 145 146, on right: 110 111 112 121 123 133 139
    141 155
declaration_list (136)
    on left: 147 148, on right: 143 145 148
statement_list (137)
    on left: 149 150, on right: 143 144 150
statement (138)
    on left: 151 152 153 154 155, on right: 122 124 134 140 142 149
    150
expression_statement (139)
    on left: 156, on right: 153
semi_colon_statement (140)
    on left: 157 158, on right: 154
return_statement (141)
    on left: 159 160, on right: 157


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program         go to state 3
    declaration     go to state 4
    fn_prototype    go to state 5
    fn_declaration  go to state 6


State 1

   13 declaration: INT . init_declarator_list SEMI_COLON
   14            | INT . SEMI_COLON
  107 fn_prototype: INT . IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  109             | INT . pointer IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  110 fn_declaration: INT . IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement
  112               | INT . pointer IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET    shift, and go to state 7
    SEMI_COLON  shift, and go to state 8
    MULT        shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    init_declarator_list  go to state 11
    init_declarator       go to state 12
    declarator            go to state 13
    direct_declarator     go to state 14
    pointer               go to state 15


State 2

  108 fn_prototype: VOID . IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  111 fn_declaration: VOID . IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

    IDENTIFIER  shift, and go to state 16


State 3

    0 $accept: program . $end
    4 program: program . fn_declaration
    5        | program . declaration
    6        | program . fn_prototype

    $end  shift, and go to state 17
    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    declaration     go to state 18
    fn_prototype    go to state 19
    fn_declaration  go to state 20


State 4

    2 program: declaration .

    $default  reduce using rule 2 (program)


State 5

    3 program: fn_prototype .

    $default  reduce using rule 3 (program)


State 6

    1 program: fn_declaration .

    $default  reduce using rule 1 (program)


State 7

   22 direct_declarator: LBRACKET . declarator RBRACKET

    LBRACKET    shift, and go to state 7
    MULT        shift, and go to state 9
    IDENTIFIER  shift, and go to state 21

    declarator         go to state 22
    direct_declarator  go to state 14
    pointer            go to state 23


State 8

   14 declaration: INT SEMI_COLON .

    $default  reduce using rule 14 (declaration)


State 9

   25 pointer: MULT .

    $default  reduce using rule 25 (pointer)


State 10

   21 direct_declarator: IDENTIFIER .
  107 fn_prototype: INT IDENTIFIER . LBRACKET fn_params_list RBRACKET SEMI_COLON
  110 fn_declaration: INT IDENTIFIER . LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET  shift, and go to state 24

    $default  reduce using rule 21 (direct_declarator)


State 11

   13 declaration: INT init_declarator_list . SEMI_COLON
   16 init_declarator_list: init_declarator_list . COMMA init_declarator

    COMMA       shift, and go to state 25
    SEMI_COLON  shift, and go to state 26


State 12

   15 init_declarator_list: init_declarator .

    $default  reduce using rule 15 (init_declarator_list)


State 13

   17 init_declarator: declarator .
   18                | declarator . EQUALS initializer

    EQUALS  shift, and go to state 27

    $default  reduce using rule 17 (init_declarator)


State 14

   19 declarator: direct_declarator .
   23 direct_declarator: direct_declarator . LSQUARE constant_expression RSQUARE
   24                  | direct_declarator . LSQUARE RSQUARE

    LSQUARE  shift, and go to state 28

    $default  reduce using rule 19 (declarator)


State 15

   20 declarator: pointer . direct_declarator
   26 pointer: pointer . MULT
  109 fn_prototype: INT pointer . IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  112 fn_declaration: INT pointer . IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET    shift, and go to state 7
    MULT        shift, and go to state 29
    IDENTIFIER  shift, and go to state 30

    direct_declarator  go to state 31


State 16

  108 fn_prototype: VOID IDENTIFIER . LBRACKET fn_params_list RBRACKET SEMI_COLON
  111 fn_declaration: VOID IDENTIFIER . LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET  shift, and go to state 32


State 17

    0 $accept: program $end .

    $default  accept


State 18

    5 program: program declaration .

    $default  reduce using rule 5 (program)


State 19

    6 program: program fn_prototype .

    $default  reduce using rule 6 (program)


State 20

    4 program: program fn_declaration .

    $default  reduce using rule 4 (program)


State 21

   21 direct_declarator: IDENTIFIER .

    $default  reduce using rule 21 (direct_declarator)


State 22

   22 direct_declarator: LBRACKET declarator . RBRACKET

    RBRACKET  shift, and go to state 33


State 23

   20 declarator: pointer . direct_declarator
   26 pointer: pointer . MULT

    LBRACKET    shift, and go to state 7
    MULT        shift, and go to state 29
    IDENTIFIER  shift, and go to state 21

    direct_declarator  go to state 31


State 24

  107 fn_prototype: INT IDENTIFIER LBRACKET . fn_params_list RBRACKET SEMI_COLON
  110 fn_declaration: INT IDENTIFIER LBRACKET . fn_params_list RBRACKET compound_statement

    INT  shift, and go to state 34

    $default  reduce using rule 115 (fn_params_list)

    fn_params_list  go to state 35


State 25

   16 init_declarator_list: init_declarator_list COMMA . init_declarator

    LBRACKET    shift, and go to state 7
    MULT        shift, and go to state 9
    IDENTIFIER  shift, and go to state 21

    init_declarator    go to state 36
    declarator         go to state 13
    direct_declarator  go to state 14
    pointer            go to state 23


State 26

   13 declaration: INT init_declarator_list SEMI_COLON .

    $default  reduce using rule 13 (declaration)


State 27

   18 init_declarator: declarator EQUALS . initializer

    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 38
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    initializer                go to state 54
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 72
    bracketed_identifier       go to state 73


State 28

   23 direct_declarator: direct_declarator LSQUARE . constant_expression RSQUARE
   24                  | direct_declarator LSQUARE . RSQUARE

    RSQUARE         shift, and go to state 74
    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 76
    constant_expression        go to state 77
    bracketed_identifier       go to state 73


State 29

   26 pointer: pointer MULT .

    $default  reduce using rule 26 (pointer)


State 30

   21 direct_declarator: IDENTIFIER .
  109 fn_prototype: INT pointer IDENTIFIER . LBRACKET fn_params_list RBRACKET SEMI_COLON
  112 fn_declaration: INT pointer IDENTIFIER . LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET  shift, and go to state 78

    $default  reduce using rule 21 (direct_declarator)


State 31

   20 declarator: pointer direct_declarator .
   23 direct_declarator: direct_declarator . LSQUARE constant_expression RSQUARE
   24                  | direct_declarator . LSQUARE RSQUARE

    LSQUARE  shift, and go to state 28

    $default  reduce using rule 20 (declarator)


State 32

  108 fn_prototype: VOID IDENTIFIER LBRACKET . fn_params_list RBRACKET SEMI_COLON
  111 fn_declaration: VOID IDENTIFIER LBRACKET . fn_params_list RBRACKET compound_statement

    INT  shift, and go to state 34

    $default  reduce using rule 115 (fn_params_list)

    fn_params_list  go to state 79


State 33

   22 direct_declarator: LBRACKET declarator RBRACKET .

    $default  reduce using rule 22 (direct_declarator)


State 34

  113 fn_params_list: INT . declarator

    LBRACKET    shift, and go to state 7
    MULT        shift, and go to state 9
    IDENTIFIER  shift, and go to state 21

    declarator         go to state 80
    direct_declarator  go to state 14
    pointer            go to state 23


State 35

  107 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list . RBRACKET SEMI_COLON
  110 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list . RBRACKET compound_statement
  114 fn_params_list: fn_params_list . COMMA INT declarator

    RBRACKET  shift, and go to state 81
    COMMA     shift, and go to state 82


State 36

   16 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 16 (init_declarator_list)


State 37

   35 primary_expression: LBRACKET . expression RBRACKET
   59 cast_expression: LBRACKET . type_name RBRACKET cast_expression
  117 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    DOUBLE          shift, and go to state 83
    INT             shift, and go to state 84
    CHAR            shift, and go to state 85
    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    type_name                  go to state 86
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 87
    bracketed_identifier       go to state 88


State 38

   28 initializer: LCURLY . initializer_list RCURLY
   29            | LCURLY . initializer_list COMMA RCURLY

    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 38
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    initializer                go to state 89
    initializer_list           go to state 90
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 72
    bracketed_identifier       go to state 73


State 39

   47 unary_expression: PLUS_PLUS . unary_expression

    LBRACKET        shift, and go to state 91
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 92
    UNARY_OPERATOR        go to state 58
    bracketed_identifier  go to state 73


State 40

   48 unary_expression: MINUS_MINUS . unary_expression

    LBRACKET        shift, and go to state 91
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 93
    UNARY_OPERATOR        go to state 58
    bracketed_identifier  go to state 73


State 41

   52 unary_expression: SIZEOF . unary_expression
   53                 | SIZEOF . LBRACKET INT RBRACKET

    LBRACKET        shift, and go to state 94
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 95
    UNARY_OPERATOR        go to state 58
    bracketed_identifier  go to state 73


State 42

   51 unary_expression: BITWISE_AND . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 96
    bracketed_identifier  go to state 73


State 43

   50 unary_expression: MULT . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 97
    bracketed_identifier  go to state 73


State 44

   54 UNARY_OPERATOR: PLUS .

    $default  reduce using rule 54 (UNARY_OPERATOR)


State 45

   55 UNARY_OPERATOR: MINUS .

    $default  reduce using rule 55 (UNARY_OPERATOR)


State 46

   56 UNARY_OPERATOR: WAVE .

    $default  reduce using rule 56 (UNARY_OPERATOR)


State 47

   57 UNARY_OPERATOR: EXL_MARK .

    $default  reduce using rule 57 (UNARY_OPERATOR)


State 48

    8 CONSTANT: INTEGER_CONST .

    $default  reduce using rule 8 (CONSTANT)


State 49

    7 CONSTANT: FLOATING_CONST .

    $default  reduce using rule 7 (CONSTANT)


State 50

    9 CONSTANT: CHAR_CONST .

    $default  reduce using rule 9 (CONSTANT)


State 51

   32 primary_expression: IDENTIFIER .
  116 bracketed_identifier: IDENTIFIER .

    LBRACKET  reduce using rule 116 (bracketed_identifier)
    RBRACKET  reduce using rule 32 (primary_expression)
    RBRACKET  [reduce using rule 116 (bracketed_identifier)]
    $default  reduce using rule 32 (primary_expression)


State 52

   34 primary_expression: STRING_LITERAL .

    $default  reduce using rule 34 (primary_expression)


State 53

   33 primary_expression: CONSTANT .

    $default  reduce using rule 33 (primary_expression)


State 54

   18 init_declarator: declarator EQUALS initializer .

    $default  reduce using rule 18 (init_declarator)


State 55

   36 postfix_expression: primary_expression .

    $default  reduce using rule 36 (postfix_expression)


State 56

   37 postfix_expression: postfix_expression . LSQUARE expression RSQUARE
   40                   | postfix_expression . DOT IDENTIFIER
   41                   | postfix_expression . PTR_OP IDENTIFIER
   42                   | postfix_expression . PLUS_PLUS
   43                   | postfix_expression . MINUS_MINUS
   46 unary_expression: postfix_expression .

    LSQUARE      shift, and go to state 98
    DOT          shift, and go to state 99
    PTR_OP       shift, and go to state 100
    PLUS_PLUS    shift, and go to state 101
    MINUS_MINUS  shift, and go to state 102

    $default  reduce using rule 46 (unary_expression)


State 57

   58 cast_expression: unary_expression .
   91 assignment_expression: unary_expression . ASSIGNMENT_OPERATOR assignment_expression

    MULT_EQUALS     shift, and go to state 103
    DIV_EQUALS      shift, and go to state 104
    PERCENT_EQUALS  shift, and go to state 105
    PLUS_EQUALS     shift, and go to state 106
    MINUS_EQUALS    shift, and go to state 107
    LSHIFT_EQUALS   shift, and go to state 108
    RSHIFT_EQUALS   shift, and go to state 109
    AND_EQUALS      shift, and go to state 110
    XOR_EQUALS      shift, and go to state 111
    OR_EQUALS       shift, and go to state 112
    EQUALS          shift, and go to state 113

    $default  reduce using rule 58 (cast_expression)

    ASSIGNMENT_OPERATOR  go to state 114


State 58

   49 unary_expression: UNARY_OPERATOR . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 115
    bracketed_identifier  go to state 73


State 59

   60 multiplicative_expression: cast_expression .

    $default  reduce using rule 60 (multiplicative_expression)


State 60

   61 multiplicative_expression: multiplicative_expression . MULT cast_expression
   62                          | multiplicative_expression . DIV cast_expression
   63                          | multiplicative_expression . PERCENT cast_expression
   64 additive_expression: multiplicative_expression .

    MULT     shift, and go to state 116
    DIV      shift, and go to state 117
    PERCENT  shift, and go to state 118

    $default  reduce using rule 64 (additive_expression)


State 61

   65 additive_expression: additive_expression . PLUS multiplicative_expression
   66                    | additive_expression . MINUS multiplicative_expression
   67 shift_expression: additive_expression .

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 67 (shift_expression)


State 62

   68 shift_expression: shift_expression . LSHIFT additive_expression
   69                 | shift_expression . RSHIFT additive_expression
   70 relational_expression: shift_expression .

    LSHIFT  shift, and go to state 121
    RSHIFT  shift, and go to state 122

    $default  reduce using rule 70 (relational_expression)


State 63

   71 relational_expression: relational_expression . LOGICAL_LESS shift_expression
   72                      | relational_expression . LOGICAL_MORE shift_expression
   73                      | relational_expression . LESS_OR_EQUAL shift_expression
   74                      | relational_expression . MORE_OR_EQUAL shift_expression
   75 equality_expression: relational_expression .

    LESS_OR_EQUAL  shift, and go to state 123
    MORE_OR_EQUAL  shift, and go to state 124
    LOGICAL_MORE   shift, and go to state 125
    LOGICAL_LESS   shift, and go to state 126

    $default  reduce using rule 75 (equality_expression)


State 64

   76 equality_expression: equality_expression . LOGICAL_EQUALITY relational_expression
   77                    | equality_expression . LOGICAL_INEQUALITY relational_expression
   78 and_expression: equality_expression .

    LOGICAL_EQUALITY    shift, and go to state 127
    LOGICAL_INEQUALITY  shift, and go to state 128

    $default  reduce using rule 78 (and_expression)


State 65

   79 and_expression: and_expression . BITWISE_AND equality_expression
   80 exclusive_or_expression: and_expression .

    BITWISE_AND  shift, and go to state 129

    $default  reduce using rule 80 (exclusive_or_expression)


State 66

   81 exclusive_or_expression: exclusive_or_expression . BITWISE_XOR and_expression
   82 inclusive_or_expression: exclusive_or_expression .

    BITWISE_XOR  shift, and go to state 130

    $default  reduce using rule 82 (inclusive_or_expression)


State 67

   83 inclusive_or_expression: inclusive_or_expression . BITWISE_OR exclusive_or_expression
   84 logical_and_expression: inclusive_or_expression .

    BITWISE_OR  shift, and go to state 131

    $default  reduce using rule 84 (logical_and_expression)


State 68

   85 logical_and_expression: logical_and_expression . LOGICAL_AND inclusive_or_expression
   86 logical_or_expression: logical_and_expression .

    LOGICAL_AND  shift, and go to state 132

    $default  reduce using rule 86 (logical_or_expression)


State 69

   87 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression
   88 conditional_expression: logical_or_expression .
   89                       | logical_or_expression . Q_MARK expression COLON conditional_expression

    LOGICAL_OR  shift, and go to state 133
    Q_MARK      shift, and go to state 134

    $default  reduce using rule 88 (conditional_expression)


State 70

   90 assignment_expression: conditional_expression .

    $default  reduce using rule 90 (assignment_expression)


State 71

  103 expression: assignment_expression .

    $default  reduce using rule 103 (expression)


State 72

   27 initializer: expression .

    $default  reduce using rule 27 (initializer)


State 73

   38 postfix_expression: bracketed_identifier . LBRACKET argument_expression_list RBRACKET
   39                   | bracketed_identifier . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 135


State 74

   24 direct_declarator: direct_declarator LSQUARE RSQUARE .

    $default  reduce using rule 24 (direct_declarator)


State 75

   58 cast_expression: unary_expression .

    $default  reduce using rule 58 (cast_expression)


State 76

  106 constant_expression: conditional_expression .

    $default  reduce using rule 106 (constant_expression)


State 77

   23 direct_declarator: direct_declarator LSQUARE constant_expression . RSQUARE

    RSQUARE  shift, and go to state 136


State 78

  109 fn_prototype: INT pointer IDENTIFIER LBRACKET . fn_params_list RBRACKET SEMI_COLON
  112 fn_declaration: INT pointer IDENTIFIER LBRACKET . fn_params_list RBRACKET compound_statement

    INT  shift, and go to state 34

    $default  reduce using rule 115 (fn_params_list)

    fn_params_list  go to state 137


State 79

  108 fn_prototype: VOID IDENTIFIER LBRACKET fn_params_list . RBRACKET SEMI_COLON
  111 fn_declaration: VOID IDENTIFIER LBRACKET fn_params_list . RBRACKET compound_statement
  114 fn_params_list: fn_params_list . COMMA INT declarator

    RBRACKET  shift, and go to state 138
    COMMA     shift, and go to state 82


State 80

  113 fn_params_list: INT declarator .

    $default  reduce using rule 113 (fn_params_list)


State 81

  107 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list RBRACKET . SEMI_COLON
  110 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET . compound_statement

    LCURLY      shift, and go to state 139
    SEMI_COLON  shift, and go to state 140

    compound_statement  go to state 141


State 82

  114 fn_params_list: fn_params_list COMMA . INT declarator

    INT  shift, and go to state 142


State 83

   11 type_name: DOUBLE .

    $default  reduce using rule 11 (type_name)


State 84

   10 type_name: INT .

    $default  reduce using rule 10 (type_name)


State 85

   12 type_name: CHAR .

    $default  reduce using rule 12 (type_name)


State 86

   59 cast_expression: LBRACKET type_name . RBRACKET cast_expression

    RBRACKET  shift, and go to state 143


State 87

   35 primary_expression: LBRACKET expression . RBRACKET

    RBRACKET  shift, and go to state 144


State 88

   38 postfix_expression: bracketed_identifier . LBRACKET argument_expression_list RBRACKET
   39                   | bracketed_identifier . LBRACKET RBRACKET
  117 bracketed_identifier: LBRACKET bracketed_identifier . RBRACKET

    LBRACKET  shift, and go to state 135
    RBRACKET  shift, and go to state 145


State 89

   30 initializer_list: initializer .

    $default  reduce using rule 30 (initializer_list)


State 90

   28 initializer: LCURLY initializer_list . RCURLY
   29            | LCURLY initializer_list . COMMA RCURLY
   31 initializer_list: initializer_list . COMMA initializer

    RCURLY  shift, and go to state 146
    COMMA   shift, and go to state 147


State 91

   35 primary_expression: LBRACKET . expression RBRACKET
  117 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 87
    bracketed_identifier       go to state 88


State 92

   47 unary_expression: PLUS_PLUS unary_expression .

    $default  reduce using rule 47 (unary_expression)


State 93

   48 unary_expression: MINUS_MINUS unary_expression .

    $default  reduce using rule 48 (unary_expression)


State 94

   35 primary_expression: LBRACKET . expression RBRACKET
   53 unary_expression: SIZEOF LBRACKET . INT RBRACKET
  117 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    INT             shift, and go to state 148
    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 87
    bracketed_identifier       go to state 88


State 95

   52 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 52 (unary_expression)


State 96

   51 unary_expression: BITWISE_AND cast_expression .

    $default  reduce using rule 51 (unary_expression)


State 97

   50 unary_expression: MULT cast_expression .

    $default  reduce using rule 50 (unary_expression)


State 98

   37 postfix_expression: postfix_expression LSQUARE . expression RSQUARE

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 149
    bracketed_identifier       go to state 73


State 99

   40 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 150


State 100

   41 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 151


State 101

   42 postfix_expression: postfix_expression PLUS_PLUS .

    $default  reduce using rule 42 (postfix_expression)


State 102

   43 postfix_expression: postfix_expression MINUS_MINUS .

    $default  reduce using rule 43 (postfix_expression)


State 103

   93 ASSIGNMENT_OPERATOR: MULT_EQUALS .

    $default  reduce using rule 93 (ASSIGNMENT_OPERATOR)


State 104

   94 ASSIGNMENT_OPERATOR: DIV_EQUALS .

    $default  reduce using rule 94 (ASSIGNMENT_OPERATOR)


State 105

   95 ASSIGNMENT_OPERATOR: PERCENT_EQUALS .

    $default  reduce using rule 95 (ASSIGNMENT_OPERATOR)


State 106

   96 ASSIGNMENT_OPERATOR: PLUS_EQUALS .

    $default  reduce using rule 96 (ASSIGNMENT_OPERATOR)


State 107

   97 ASSIGNMENT_OPERATOR: MINUS_EQUALS .

    $default  reduce using rule 97 (ASSIGNMENT_OPERATOR)


State 108

   98 ASSIGNMENT_OPERATOR: LSHIFT_EQUALS .

    $default  reduce using rule 98 (ASSIGNMENT_OPERATOR)


State 109

   99 ASSIGNMENT_OPERATOR: RSHIFT_EQUALS .

    $default  reduce using rule 99 (ASSIGNMENT_OPERATOR)


State 110

  100 ASSIGNMENT_OPERATOR: AND_EQUALS .

    $default  reduce using rule 100 (ASSIGNMENT_OPERATOR)


State 111

  101 ASSIGNMENT_OPERATOR: XOR_EQUALS .

    $default  reduce using rule 101 (ASSIGNMENT_OPERATOR)


State 112

  102 ASSIGNMENT_OPERATOR: OR_EQUALS .

    $default  reduce using rule 102 (ASSIGNMENT_OPERATOR)


State 113

   92 ASSIGNMENT_OPERATOR: EQUALS .

    $default  reduce using rule 92 (ASSIGNMENT_OPERATOR)


State 114

   91 assignment_expression: unary_expression ASSIGNMENT_OPERATOR . assignment_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 152
    bracketed_identifier       go to state 73


State 115

   49 unary_expression: UNARY_OPERATOR cast_expression .

    $default  reduce using rule 49 (unary_expression)


State 116

   61 multiplicative_expression: multiplicative_expression MULT . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 153
    bracketed_identifier  go to state 73


State 117

   62 multiplicative_expression: multiplicative_expression DIV . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 154
    bracketed_identifier  go to state 73


State 118

   63 multiplicative_expression: multiplicative_expression PERCENT . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 155
    bracketed_identifier  go to state 73


State 119

   65 additive_expression: additive_expression PLUS . multiplicative_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 156
    bracketed_identifier       go to state 73


State 120

   66 additive_expression: additive_expression MINUS . multiplicative_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 157
    bracketed_identifier       go to state 73


State 121

   68 shift_expression: shift_expression LSHIFT . additive_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 158
    bracketed_identifier       go to state 73


State 122

   69 shift_expression: shift_expression RSHIFT . additive_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 159
    bracketed_identifier       go to state 73


State 123

   73 relational_expression: relational_expression LESS_OR_EQUAL . shift_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 160
    bracketed_identifier       go to state 73


State 124

   74 relational_expression: relational_expression MORE_OR_EQUAL . shift_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 161
    bracketed_identifier       go to state 73


State 125

   72 relational_expression: relational_expression LOGICAL_MORE . shift_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 162
    bracketed_identifier       go to state 73


State 126

   71 relational_expression: relational_expression LOGICAL_LESS . shift_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 163
    bracketed_identifier       go to state 73


State 127

   76 equality_expression: equality_expression LOGICAL_EQUALITY . relational_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 164
    bracketed_identifier       go to state 73


State 128

   77 equality_expression: equality_expression LOGICAL_INEQUALITY . relational_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 165
    bracketed_identifier       go to state 73


State 129

   79 and_expression: and_expression BITWISE_AND . equality_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 166
    bracketed_identifier       go to state 73


State 130

   81 exclusive_or_expression: exclusive_or_expression BITWISE_XOR . and_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 167
    bracketed_identifier       go to state 73


State 131

   83 inclusive_or_expression: inclusive_or_expression BITWISE_OR . exclusive_or_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 168
    bracketed_identifier       go to state 73


State 132

   85 logical_and_expression: logical_and_expression LOGICAL_AND . inclusive_or_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 169
    bracketed_identifier       go to state 73


State 133

   87 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 170
    bracketed_identifier       go to state 73


State 134

   89 conditional_expression: logical_or_expression Q_MARK . expression COLON conditional_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 171
    bracketed_identifier       go to state 73


State 135

   38 postfix_expression: bracketed_identifier LBRACKET . argument_expression_list RBRACKET
   39                   | bracketed_identifier LBRACKET . RBRACKET

    LBRACKET        shift, and go to state 37
    RBRACKET        shift, and go to state 172
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    argument_expression_list   go to state 173
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 174
    bracketed_identifier       go to state 73


State 136

   23 direct_declarator: direct_declarator LSQUARE constant_expression RSQUARE .

    $default  reduce using rule 23 (direct_declarator)


State 137

  109 fn_prototype: INT pointer IDENTIFIER LBRACKET fn_params_list . RBRACKET SEMI_COLON
  112 fn_declaration: INT pointer IDENTIFIER LBRACKET fn_params_list . RBRACKET compound_statement
  114 fn_params_list: fn_params_list . COMMA INT declarator

    RBRACKET  shift, and go to state 175
    COMMA     shift, and go to state 82


State 138

  108 fn_prototype: VOID IDENTIFIER LBRACKET fn_params_list RBRACKET . SEMI_COLON
  111 fn_declaration: VOID IDENTIFIER LBRACKET fn_params_list RBRACKET . compound_statement

    LCURLY      shift, and go to state 139
    SEMI_COLON  shift, and go to state 176

    compound_statement  go to state 177


State 139

  143 compound_statement: LCURLY . declaration_list statement_list RCURLY
  144                   | LCURLY . statement_list RCURLY
  145                   | LCURLY . declaration_list RCURLY
  146                   | LCURLY . RCURLY

    INT             shift, and go to state 178
    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    RCURLY          shift, and go to state 184
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    declaration                go to state 186
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 195
    declaration_list           go to state 196
    statement_list             go to state 197
    statement                  go to state 198
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 140

  107 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON .

    $default  reduce using rule 107 (fn_prototype)


State 141

  110 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement .

    $default  reduce using rule 110 (fn_declaration)


State 142

  114 fn_params_list: fn_params_list COMMA INT . declarator

    LBRACKET    shift, and go to state 7
    MULT        shift, and go to state 9
    IDENTIFIER  shift, and go to state 21

    declarator         go to state 202
    direct_declarator  go to state 14
    pointer            go to state 23


State 143

   59 cast_expression: LBRACKET type_name RBRACKET . cast_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT              go to state 53
    primary_expression    go to state 55
    postfix_expression    go to state 56
    unary_expression      go to state 75
    UNARY_OPERATOR        go to state 58
    cast_expression       go to state 203
    bracketed_identifier  go to state 73


State 144

   35 primary_expression: LBRACKET expression RBRACKET .

    $default  reduce using rule 35 (primary_expression)


State 145

  117 bracketed_identifier: LBRACKET bracketed_identifier RBRACKET .

    $default  reduce using rule 117 (bracketed_identifier)


State 146

   28 initializer: LCURLY initializer_list RCURLY .

    $default  reduce using rule 28 (initializer)


State 147

   29 initializer: LCURLY initializer_list COMMA . RCURLY
   31 initializer_list: initializer_list COMMA . initializer

    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 38
    RCURLY          shift, and go to state 204
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    initializer                go to state 205
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 72
    bracketed_identifier       go to state 73


State 148

   53 unary_expression: SIZEOF LBRACKET INT . RBRACKET

    RBRACKET  shift, and go to state 206


State 149

   37 postfix_expression: postfix_expression LSQUARE expression . RSQUARE

    RSQUARE  shift, and go to state 207


State 150

   40 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 40 (postfix_expression)


State 151

   41 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 41 (postfix_expression)


State 152

   91 assignment_expression: unary_expression ASSIGNMENT_OPERATOR assignment_expression .

    $default  reduce using rule 91 (assignment_expression)


State 153

   61 multiplicative_expression: multiplicative_expression MULT cast_expression .

    $default  reduce using rule 61 (multiplicative_expression)


State 154

   62 multiplicative_expression: multiplicative_expression DIV cast_expression .

    $default  reduce using rule 62 (multiplicative_expression)


State 155

   63 multiplicative_expression: multiplicative_expression PERCENT cast_expression .

    $default  reduce using rule 63 (multiplicative_expression)


State 156

   61 multiplicative_expression: multiplicative_expression . MULT cast_expression
   62                          | multiplicative_expression . DIV cast_expression
   63                          | multiplicative_expression . PERCENT cast_expression
   65 additive_expression: additive_expression PLUS multiplicative_expression .

    MULT     shift, and go to state 116
    DIV      shift, and go to state 117
    PERCENT  shift, and go to state 118

    $default  reduce using rule 65 (additive_expression)


State 157

   61 multiplicative_expression: multiplicative_expression . MULT cast_expression
   62                          | multiplicative_expression . DIV cast_expression
   63                          | multiplicative_expression . PERCENT cast_expression
   66 additive_expression: additive_expression MINUS multiplicative_expression .

    MULT     shift, and go to state 116
    DIV      shift, and go to state 117
    PERCENT  shift, and go to state 118

    $default  reduce using rule 66 (additive_expression)


State 158

   65 additive_expression: additive_expression . PLUS multiplicative_expression
   66                    | additive_expression . MINUS multiplicative_expression
   68 shift_expression: shift_expression LSHIFT additive_expression .

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 68 (shift_expression)


State 159

   65 additive_expression: additive_expression . PLUS multiplicative_expression
   66                    | additive_expression . MINUS multiplicative_expression
   69 shift_expression: shift_expression RSHIFT additive_expression .

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 69 (shift_expression)


State 160

   68 shift_expression: shift_expression . LSHIFT additive_expression
   69                 | shift_expression . RSHIFT additive_expression
   73 relational_expression: relational_expression LESS_OR_EQUAL shift_expression .

    LSHIFT  shift, and go to state 121
    RSHIFT  shift, and go to state 122

    $default  reduce using rule 73 (relational_expression)


State 161

   68 shift_expression: shift_expression . LSHIFT additive_expression
   69                 | shift_expression . RSHIFT additive_expression
   74 relational_expression: relational_expression MORE_OR_EQUAL shift_expression .

    LSHIFT  shift, and go to state 121
    RSHIFT  shift, and go to state 122

    $default  reduce using rule 74 (relational_expression)


State 162

   68 shift_expression: shift_expression . LSHIFT additive_expression
   69                 | shift_expression . RSHIFT additive_expression
   72 relational_expression: relational_expression LOGICAL_MORE shift_expression .

    LSHIFT  shift, and go to state 121
    RSHIFT  shift, and go to state 122

    $default  reduce using rule 72 (relational_expression)


State 163

   68 shift_expression: shift_expression . LSHIFT additive_expression
   69                 | shift_expression . RSHIFT additive_expression
   71 relational_expression: relational_expression LOGICAL_LESS shift_expression .

    LSHIFT  shift, and go to state 121
    RSHIFT  shift, and go to state 122

    $default  reduce using rule 71 (relational_expression)


State 164

   71 relational_expression: relational_expression . LOGICAL_LESS shift_expression
   72                      | relational_expression . LOGICAL_MORE shift_expression
   73                      | relational_expression . LESS_OR_EQUAL shift_expression
   74                      | relational_expression . MORE_OR_EQUAL shift_expression
   76 equality_expression: equality_expression LOGICAL_EQUALITY relational_expression .

    LESS_OR_EQUAL  shift, and go to state 123
    MORE_OR_EQUAL  shift, and go to state 124
    LOGICAL_MORE   shift, and go to state 125
    LOGICAL_LESS   shift, and go to state 126

    $default  reduce using rule 76 (equality_expression)


State 165

   71 relational_expression: relational_expression . LOGICAL_LESS shift_expression
   72                      | relational_expression . LOGICAL_MORE shift_expression
   73                      | relational_expression . LESS_OR_EQUAL shift_expression
   74                      | relational_expression . MORE_OR_EQUAL shift_expression
   77 equality_expression: equality_expression LOGICAL_INEQUALITY relational_expression .

    LESS_OR_EQUAL  shift, and go to state 123
    MORE_OR_EQUAL  shift, and go to state 124
    LOGICAL_MORE   shift, and go to state 125
    LOGICAL_LESS   shift, and go to state 126

    $default  reduce using rule 77 (equality_expression)


State 166

   76 equality_expression: equality_expression . LOGICAL_EQUALITY relational_expression
   77                    | equality_expression . LOGICAL_INEQUALITY relational_expression
   79 and_expression: and_expression BITWISE_AND equality_expression .

    LOGICAL_EQUALITY    shift, and go to state 127
    LOGICAL_INEQUALITY  shift, and go to state 128

    $default  reduce using rule 79 (and_expression)


State 167

   79 and_expression: and_expression . BITWISE_AND equality_expression
   81 exclusive_or_expression: exclusive_or_expression BITWISE_XOR and_expression .

    BITWISE_AND  shift, and go to state 129

    $default  reduce using rule 81 (exclusive_or_expression)


State 168

   81 exclusive_or_expression: exclusive_or_expression . BITWISE_XOR and_expression
   83 inclusive_or_expression: inclusive_or_expression BITWISE_OR exclusive_or_expression .

    BITWISE_XOR  shift, and go to state 130

    $default  reduce using rule 83 (inclusive_or_expression)


State 169

   83 inclusive_or_expression: inclusive_or_expression . BITWISE_OR exclusive_or_expression
   85 logical_and_expression: logical_and_expression LOGICAL_AND inclusive_or_expression .

    BITWISE_OR  shift, and go to state 131

    $default  reduce using rule 85 (logical_and_expression)


State 170

   85 logical_and_expression: logical_and_expression . LOGICAL_AND inclusive_or_expression
   87 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .

    LOGICAL_AND  shift, and go to state 132

    $default  reduce using rule 87 (logical_or_expression)


State 171

   89 conditional_expression: logical_or_expression Q_MARK expression . COLON conditional_expression

    COLON  shift, and go to state 208


State 172

   39 postfix_expression: bracketed_identifier LBRACKET RBRACKET .

    $default  reduce using rule 39 (postfix_expression)


State 173

   38 postfix_expression: bracketed_identifier LBRACKET argument_expression_list . RBRACKET
   45 argument_expression_list: argument_expression_list . COMMA expression

    RBRACKET  shift, and go to state 209
    COMMA     shift, and go to state 210


State 174

   44 argument_expression_list: expression .

    $default  reduce using rule 44 (argument_expression_list)


State 175

  109 fn_prototype: INT pointer IDENTIFIER LBRACKET fn_params_list RBRACKET . SEMI_COLON
  112 fn_declaration: INT pointer IDENTIFIER LBRACKET fn_params_list RBRACKET . compound_statement

    LCURLY      shift, and go to state 139
    SEMI_COLON  shift, and go to state 211

    compound_statement  go to state 212


State 176

  108 fn_prototype: VOID IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON .

    $default  reduce using rule 108 (fn_prototype)


State 177

  111 fn_declaration: VOID IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement .

    $default  reduce using rule 111 (fn_declaration)


State 178

   13 declaration: INT . init_declarator_list SEMI_COLON
   14            | INT . SEMI_COLON

    LBRACKET    shift, and go to state 7
    SEMI_COLON  shift, and go to state 8
    MULT        shift, and go to state 9
    IDENTIFIER  shift, and go to state 21

    init_declarator_list  go to state 11
    init_declarator       go to state 12
    declarator            go to state 13
    direct_declarator     go to state 14
    pointer               go to state 23


State 179

  159 return_statement: RETURN . expression SEMI_COLON
  160                 | RETURN . SEMI_COLON

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 213
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 214
    bracketed_identifier       go to state 73


State 180

  123 for_loop: FOR . LBRACKET for_loop_decl_statement RBRACKET compound_statement
  124         | FOR . LBRACKET for_loop_decl_statement RBRACKET statement

    LBRACKET  shift, and go to state 215


State 181

  121 do_while_loop: DO . compound_statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON
  122              | DO . statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 216
    statement                  go to state 217
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 182

  139 if_statement: IF . LBRACKET expression_list RBRACKET compound_statement
  140             | IF . LBRACKET expression_list RBRACKET statement

    LBRACKET  shift, and go to state 218


State 183

  133 while_loop: WHILE . LBRACKET expression_list RBRACKET compound_statement
  134           | WHILE . LBRACKET expression_list RBRACKET statement

    LBRACKET  shift, and go to state 219


State 184

  146 compound_statement: LCURLY RCURLY .

    $default  reduce using rule 146 (compound_statement)


State 185

  158 semi_colon_statement: SEMI_COLON .

    $default  reduce using rule 158 (semi_colon_statement)


State 186

  147 declaration_list: declaration .

    $default  reduce using rule 147 (declaration_list)


State 187

  104 expression_list: expression .

    $default  reduce using rule 104 (expression_list)


State 188

  105 expression_list: expression_list . COMMA expression
  156 expression_statement: expression_list . SEMI_COLON

    COMMA       shift, and go to state 220
    SEMI_COLON  shift, and go to state 221


State 189

  151 statement: loop .

    $default  reduce using rule 151 (statement)


State 190

  120 loop: do_while_loop .

    $default  reduce using rule 120 (loop)


State 191

  118 loop: for_loop .

    $default  reduce using rule 118 (loop)


State 192

  119 loop: while_loop .

    $default  reduce using rule 119 (loop)


State 193

  152 statement: if_block_statement .

    $default  reduce using rule 152 (statement)


State 194

  135 if_block_statement: if_statement .
  136                   | if_statement . else_statement_list

    ELSE  shift, and go to state 222

    ELSE      [reduce using rule 135 (if_block_statement)]
    $default  reduce using rule 135 (if_block_statement)

    else_statement_list  go to state 223
    else_statement       go to state 224


State 195

  155 statement: compound_statement .

    $default  reduce using rule 155 (statement)


State 196

  143 compound_statement: LCURLY declaration_list . statement_list RCURLY
  145                   | LCURLY declaration_list . RCURLY
  148 declaration_list: declaration_list . declaration

    INT             shift, and go to state 178
    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    RCURLY          shift, and go to state 225
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    declaration                go to state 226
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 195
    statement_list             go to state 227
    statement                  go to state 198
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 197

  144 compound_statement: LCURLY statement_list . RCURLY
  150 statement_list: statement_list . statement

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    RCURLY          shift, and go to state 228
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 195
    statement                  go to state 229
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 198

  149 statement_list: statement .

    $default  reduce using rule 149 (statement_list)


State 199

  153 statement: expression_statement .

    $default  reduce using rule 153 (statement)


State 200

  154 statement: semi_colon_statement .

    $default  reduce using rule 154 (statement)


State 201

  157 semi_colon_statement: return_statement .

    $default  reduce using rule 157 (semi_colon_statement)


State 202

  114 fn_params_list: fn_params_list COMMA INT declarator .

    $default  reduce using rule 114 (fn_params_list)


State 203

   59 cast_expression: LBRACKET type_name RBRACKET cast_expression .

    $default  reduce using rule 59 (cast_expression)


State 204

   29 initializer: LCURLY initializer_list COMMA RCURLY .

    $default  reduce using rule 29 (initializer)


State 205

   31 initializer_list: initializer_list COMMA initializer .

    $default  reduce using rule 31 (initializer_list)


State 206

   53 unary_expression: SIZEOF LBRACKET INT RBRACKET .

    $default  reduce using rule 53 (unary_expression)


State 207

   37 postfix_expression: postfix_expression LSQUARE expression RSQUARE .

    $default  reduce using rule 37 (postfix_expression)


State 208

   89 conditional_expression: logical_or_expression Q_MARK expression COLON . conditional_expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 75
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 230
    bracketed_identifier       go to state 73


State 209

   38 postfix_expression: bracketed_identifier LBRACKET argument_expression_list RBRACKET .

    $default  reduce using rule 38 (postfix_expression)


State 210

   45 argument_expression_list: argument_expression_list COMMA . expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 231
    bracketed_identifier       go to state 73


State 211

  109 fn_prototype: INT pointer IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON .

    $default  reduce using rule 109 (fn_prototype)


State 212

  112 fn_declaration: INT pointer IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement .

    $default  reduce using rule 112 (fn_declaration)


State 213

  160 return_statement: RETURN SEMI_COLON .

    $default  reduce using rule 160 (return_statement)


State 214

  159 return_statement: RETURN expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 232


State 215

  123 for_loop: FOR LBRACKET . for_loop_decl_statement RBRACKET compound_statement
  124         | FOR LBRACKET . for_loop_decl_statement RBRACKET statement

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 233
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 234
    bracketed_identifier       go to state 73
    for_loop_decl_statement    go to state 235


State 216

  121 do_while_loop: DO compound_statement . WHILE LBRACKET expression_list RBRACKET SEMI_COLON
  155 statement: compound_statement .

    WHILE  shift, and go to state 236

    WHILE  [reduce using rule 155 (statement)]


State 217

  122 do_while_loop: DO statement . WHILE LBRACKET expression_list RBRACKET SEMI_COLON

    WHILE  shift, and go to state 237


State 218

  139 if_statement: IF LBRACKET . expression_list RBRACKET compound_statement
  140             | IF LBRACKET . expression_list RBRACKET statement

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 238
    bracketed_identifier       go to state 73


State 219

  133 while_loop: WHILE LBRACKET . expression_list RBRACKET compound_statement
  134           | WHILE LBRACKET . expression_list RBRACKET statement

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 239
    bracketed_identifier       go to state 73


State 220

  105 expression_list: expression_list COMMA . expression

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 240
    bracketed_identifier       go to state 73


State 221

  156 expression_statement: expression_list SEMI_COLON .

    $default  reduce using rule 156 (expression_statement)


State 222

  141 else_statement: ELSE . compound_statement
  142               | ELSE . statement

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 241
    statement                  go to state 242
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 223

  136 if_block_statement: if_statement else_statement_list .
  138 else_statement_list: else_statement_list . else_statement

    ELSE  shift, and go to state 222

    ELSE      [reduce using rule 136 (if_block_statement)]
    $default  reduce using rule 136 (if_block_statement)

    else_statement  go to state 243


State 224

  137 else_statement_list: else_statement .

    $default  reduce using rule 137 (else_statement_list)


State 225

  145 compound_statement: LCURLY declaration_list RCURLY .

    $default  reduce using rule 145 (compound_statement)


State 226

  148 declaration_list: declaration_list declaration .

    $default  reduce using rule 148 (declaration_list)


State 227

  143 compound_statement: LCURLY declaration_list statement_list . RCURLY
  150 statement_list: statement_list . statement

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    RCURLY          shift, and go to state 244
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 195
    statement                  go to state 229
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 228

  144 compound_statement: LCURLY statement_list RCURLY .

    $default  reduce using rule 144 (compound_statement)


State 229

  150 statement_list: statement_list statement .

    $default  reduce using rule 150 (statement_list)


State 230

   89 conditional_expression: logical_or_expression Q_MARK expression COLON conditional_expression .

    $default  reduce using rule 89 (conditional_expression)


State 231

   45 argument_expression_list: argument_expression_list COMMA expression .

    $default  reduce using rule 45 (argument_expression_list)


State 232

  159 return_statement: RETURN expression SEMI_COLON .

    $default  reduce using rule 159 (return_statement)


State 233

  128 for_loop_decl_statement: SEMI_COLON . expression_list SEMI_COLON expression_list
  130                        | SEMI_COLON . SEMI_COLON expression_list
  131                        | SEMI_COLON . expression_list SEMI_COLON
  132                        | SEMI_COLON . SEMI_COLON

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 245
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 246
    bracketed_identifier       go to state 73


State 234

  105 expression_list: expression_list . COMMA expression
  125 for_loop_decl_statement: expression_list . SEMI_COLON expression_list SEMI_COLON expression_list
  126                        | expression_list . SEMI_COLON expression_list SEMI_COLON
  127                        | expression_list . SEMI_COLON SEMI_COLON expression_list
  129                        | expression_list . SEMI_COLON SEMI_COLON

    COMMA       shift, and go to state 220
    SEMI_COLON  shift, and go to state 247


State 235

  123 for_loop: FOR LBRACKET for_loop_decl_statement . RBRACKET compound_statement
  124         | FOR LBRACKET for_loop_decl_statement . RBRACKET statement

    RBRACKET  shift, and go to state 248


State 236

  121 do_while_loop: DO compound_statement WHILE . LBRACKET expression_list RBRACKET SEMI_COLON

    LBRACKET  shift, and go to state 249


State 237

  122 do_while_loop: DO statement WHILE . LBRACKET expression_list RBRACKET SEMI_COLON

    LBRACKET  shift, and go to state 250


State 238

  105 expression_list: expression_list . COMMA expression
  139 if_statement: IF LBRACKET expression_list . RBRACKET compound_statement
  140             | IF LBRACKET expression_list . RBRACKET statement

    RBRACKET  shift, and go to state 251
    COMMA     shift, and go to state 220


State 239

  105 expression_list: expression_list . COMMA expression
  133 while_loop: WHILE LBRACKET expression_list . RBRACKET compound_statement
  134           | WHILE LBRACKET expression_list . RBRACKET statement

    RBRACKET  shift, and go to state 252
    COMMA     shift, and go to state 220


State 240

  105 expression_list: expression_list COMMA expression .

    $default  reduce using rule 105 (expression_list)


State 241

  141 else_statement: ELSE compound_statement .
  155 statement: compound_statement .

    ELSE            reduce using rule 141 (else_statement)
    ELSE            [reduce using rule 155 (statement)]
    RETURN          reduce using rule 141 (else_statement)
    RETURN          [reduce using rule 155 (statement)]
    FOR             reduce using rule 141 (else_statement)
    FOR             [reduce using rule 155 (statement)]
    DO              reduce using rule 141 (else_statement)
    DO              [reduce using rule 155 (statement)]
    IF              reduce using rule 141 (else_statement)
    IF              [reduce using rule 155 (statement)]
    WHILE           reduce using rule 141 (else_statement)
    WHILE           [reduce using rule 155 (statement)]
    LBRACKET        reduce using rule 141 (else_statement)
    LBRACKET        [reduce using rule 155 (statement)]
    LCURLY          reduce using rule 141 (else_statement)
    LCURLY          [reduce using rule 155 (statement)]
    RCURLY          reduce using rule 141 (else_statement)
    RCURLY          [reduce using rule 155 (statement)]
    PLUS_PLUS       reduce using rule 141 (else_statement)
    PLUS_PLUS       [reduce using rule 155 (statement)]
    MINUS_MINUS     reduce using rule 141 (else_statement)
    MINUS_MINUS     [reduce using rule 155 (statement)]
    SIZEOF          reduce using rule 141 (else_statement)
    SIZEOF          [reduce using rule 155 (statement)]
    SEMI_COLON      reduce using rule 141 (else_statement)
    SEMI_COLON      [reduce using rule 155 (statement)]
    BITWISE_AND     reduce using rule 141 (else_statement)
    BITWISE_AND     [reduce using rule 155 (statement)]
    MULT            reduce using rule 141 (else_statement)
    MULT            [reduce using rule 155 (statement)]
    PLUS            reduce using rule 141 (else_statement)
    PLUS            [reduce using rule 155 (statement)]
    MINUS           reduce using rule 141 (else_statement)
    MINUS           [reduce using rule 155 (statement)]
    WAVE            reduce using rule 141 (else_statement)
    WAVE            [reduce using rule 155 (statement)]
    EXL_MARK        reduce using rule 141 (else_statement)
    EXL_MARK        [reduce using rule 155 (statement)]
    INTEGER_CONST   reduce using rule 141 (else_statement)
    INTEGER_CONST   [reduce using rule 155 (statement)]
    FLOATING_CONST  reduce using rule 141 (else_statement)
    FLOATING_CONST  [reduce using rule 155 (statement)]
    CHAR_CONST      reduce using rule 141 (else_statement)
    CHAR_CONST      [reduce using rule 155 (statement)]
    IDENTIFIER      reduce using rule 141 (else_statement)
    IDENTIFIER      [reduce using rule 155 (statement)]
    STRING_LITERAL  reduce using rule 141 (else_statement)
    STRING_LITERAL  [reduce using rule 155 (statement)]
    $default        reduce using rule 141 (else_statement)


State 242

  142 else_statement: ELSE statement .

    $default  reduce using rule 142 (else_statement)


State 243

  138 else_statement_list: else_statement_list else_statement .

    $default  reduce using rule 138 (else_statement_list)


State 244

  143 compound_statement: LCURLY declaration_list statement_list RCURLY .

    $default  reduce using rule 143 (compound_statement)


State 245

  130 for_loop_decl_statement: SEMI_COLON SEMI_COLON . expression_list
  132                        | SEMI_COLON SEMI_COLON .

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    $default  reduce using rule 132 (for_loop_decl_statement)

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 253
    bracketed_identifier       go to state 73


State 246

  105 expression_list: expression_list . COMMA expression
  128 for_loop_decl_statement: SEMI_COLON expression_list . SEMI_COLON expression_list
  131                        | SEMI_COLON expression_list . SEMI_COLON

    COMMA       shift, and go to state 220
    SEMI_COLON  shift, and go to state 254


State 247

  125 for_loop_decl_statement: expression_list SEMI_COLON . expression_list SEMI_COLON expression_list
  126                        | expression_list SEMI_COLON . expression_list SEMI_COLON
  127                        | expression_list SEMI_COLON . SEMI_COLON expression_list
  129                        | expression_list SEMI_COLON . SEMI_COLON

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 255
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 256
    bracketed_identifier       go to state 73


State 248

  123 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET . compound_statement
  124         | FOR LBRACKET for_loop_decl_statement RBRACKET . statement

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 257
    statement                  go to state 258
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 249

  121 do_while_loop: DO compound_statement WHILE LBRACKET . expression_list RBRACKET SEMI_COLON

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 259
    bracketed_identifier       go to state 73


State 250

  122 do_while_loop: DO statement WHILE LBRACKET . expression_list RBRACKET SEMI_COLON

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 260
    bracketed_identifier       go to state 73


State 251

  139 if_statement: IF LBRACKET expression_list RBRACKET . compound_statement
  140             | IF LBRACKET expression_list RBRACKET . statement

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 261
    statement                  go to state 262
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 252

  133 while_loop: WHILE LBRACKET expression_list RBRACKET . compound_statement
  134           | WHILE LBRACKET expression_list RBRACKET . statement

    RETURN          shift, and go to state 179
    FOR             shift, and go to state 180
    DO              shift, and go to state 181
    IF              shift, and go to state 182
    WHILE           shift, and go to state 183
    LBRACKET        shift, and go to state 37
    LCURLY          shift, and go to state 139
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    SEMI_COLON      shift, and go to state 185
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 188
    bracketed_identifier       go to state 73
    loop                       go to state 189
    do_while_loop              go to state 190
    for_loop                   go to state 191
    while_loop                 go to state 192
    if_block_statement         go to state 193
    if_statement               go to state 194
    compound_statement         go to state 263
    statement                  go to state 264
    expression_statement       go to state 199
    semi_colon_statement       go to state 200
    return_statement           go to state 201


State 253

  105 expression_list: expression_list . COMMA expression
  130 for_loop_decl_statement: SEMI_COLON SEMI_COLON expression_list .

    COMMA  shift, and go to state 220

    $default  reduce using rule 130 (for_loop_decl_statement)


State 254

  128 for_loop_decl_statement: SEMI_COLON expression_list SEMI_COLON . expression_list
  131                        | SEMI_COLON expression_list SEMI_COLON .

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    $default  reduce using rule 131 (for_loop_decl_statement)

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 265
    bracketed_identifier       go to state 73


State 255

  127 for_loop_decl_statement: expression_list SEMI_COLON SEMI_COLON . expression_list
  129                        | expression_list SEMI_COLON SEMI_COLON .

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    $default  reduce using rule 129 (for_loop_decl_statement)

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 266
    bracketed_identifier       go to state 73


State 256

  105 expression_list: expression_list . COMMA expression
  125 for_loop_decl_statement: expression_list SEMI_COLON expression_list . SEMI_COLON expression_list
  126                        | expression_list SEMI_COLON expression_list . SEMI_COLON

    COMMA       shift, and go to state 220
    SEMI_COLON  shift, and go to state 267


State 257

  123 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET compound_statement .
  155 statement: compound_statement .

    ELSE            reduce using rule 123 (for_loop)
    ELSE            [reduce using rule 155 (statement)]
    RETURN          reduce using rule 123 (for_loop)
    RETURN          [reduce using rule 155 (statement)]
    FOR             reduce using rule 123 (for_loop)
    FOR             [reduce using rule 155 (statement)]
    DO              reduce using rule 123 (for_loop)
    DO              [reduce using rule 155 (statement)]
    IF              reduce using rule 123 (for_loop)
    IF              [reduce using rule 155 (statement)]
    WHILE           reduce using rule 123 (for_loop)
    WHILE           [reduce using rule 155 (statement)]
    LBRACKET        reduce using rule 123 (for_loop)
    LBRACKET        [reduce using rule 155 (statement)]
    LCURLY          reduce using rule 123 (for_loop)
    LCURLY          [reduce using rule 155 (statement)]
    RCURLY          reduce using rule 123 (for_loop)
    RCURLY          [reduce using rule 155 (statement)]
    PLUS_PLUS       reduce using rule 123 (for_loop)
    PLUS_PLUS       [reduce using rule 155 (statement)]
    MINUS_MINUS     reduce using rule 123 (for_loop)
    MINUS_MINUS     [reduce using rule 155 (statement)]
    SIZEOF          reduce using rule 123 (for_loop)
    SIZEOF          [reduce using rule 155 (statement)]
    SEMI_COLON      reduce using rule 123 (for_loop)
    SEMI_COLON      [reduce using rule 155 (statement)]
    BITWISE_AND     reduce using rule 123 (for_loop)
    BITWISE_AND     [reduce using rule 155 (statement)]
    MULT            reduce using rule 123 (for_loop)
    MULT            [reduce using rule 155 (statement)]
    PLUS            reduce using rule 123 (for_loop)
    PLUS            [reduce using rule 155 (statement)]
    MINUS           reduce using rule 123 (for_loop)
    MINUS           [reduce using rule 155 (statement)]
    WAVE            reduce using rule 123 (for_loop)
    WAVE            [reduce using rule 155 (statement)]
    EXL_MARK        reduce using rule 123 (for_loop)
    EXL_MARK        [reduce using rule 155 (statement)]
    INTEGER_CONST   reduce using rule 123 (for_loop)
    INTEGER_CONST   [reduce using rule 155 (statement)]
    FLOATING_CONST  reduce using rule 123 (for_loop)
    FLOATING_CONST  [reduce using rule 155 (statement)]
    CHAR_CONST      reduce using rule 123 (for_loop)
    CHAR_CONST      [reduce using rule 155 (statement)]
    IDENTIFIER      reduce using rule 123 (for_loop)
    IDENTIFIER      [reduce using rule 155 (statement)]
    STRING_LITERAL  reduce using rule 123 (for_loop)
    STRING_LITERAL  [reduce using rule 155 (statement)]
    $default        reduce using rule 123 (for_loop)


State 258

  124 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET statement .

    $default  reduce using rule 124 (for_loop)


State 259

  105 expression_list: expression_list . COMMA expression
  121 do_while_loop: DO compound_statement WHILE LBRACKET expression_list . RBRACKET SEMI_COLON

    RBRACKET  shift, and go to state 268
    COMMA     shift, and go to state 220


State 260

  105 expression_list: expression_list . COMMA expression
  122 do_while_loop: DO statement WHILE LBRACKET expression_list . RBRACKET SEMI_COLON

    RBRACKET  shift, and go to state 269
    COMMA     shift, and go to state 220


State 261

  139 if_statement: IF LBRACKET expression_list RBRACKET compound_statement .
  155 statement: compound_statement .

    ELSE            reduce using rule 139 (if_statement)
    ELSE            [reduce using rule 155 (statement)]
    RETURN          reduce using rule 139 (if_statement)
    RETURN          [reduce using rule 155 (statement)]
    FOR             reduce using rule 139 (if_statement)
    FOR             [reduce using rule 155 (statement)]
    DO              reduce using rule 139 (if_statement)
    DO              [reduce using rule 155 (statement)]
    IF              reduce using rule 139 (if_statement)
    IF              [reduce using rule 155 (statement)]
    WHILE           reduce using rule 139 (if_statement)
    WHILE           [reduce using rule 155 (statement)]
    LBRACKET        reduce using rule 139 (if_statement)
    LBRACKET        [reduce using rule 155 (statement)]
    LCURLY          reduce using rule 139 (if_statement)
    LCURLY          [reduce using rule 155 (statement)]
    RCURLY          reduce using rule 139 (if_statement)
    RCURLY          [reduce using rule 155 (statement)]
    PLUS_PLUS       reduce using rule 139 (if_statement)
    PLUS_PLUS       [reduce using rule 155 (statement)]
    MINUS_MINUS     reduce using rule 139 (if_statement)
    MINUS_MINUS     [reduce using rule 155 (statement)]
    SIZEOF          reduce using rule 139 (if_statement)
    SIZEOF          [reduce using rule 155 (statement)]
    SEMI_COLON      reduce using rule 139 (if_statement)
    SEMI_COLON      [reduce using rule 155 (statement)]
    BITWISE_AND     reduce using rule 139 (if_statement)
    BITWISE_AND     [reduce using rule 155 (statement)]
    MULT            reduce using rule 139 (if_statement)
    MULT            [reduce using rule 155 (statement)]
    PLUS            reduce using rule 139 (if_statement)
    PLUS            [reduce using rule 155 (statement)]
    MINUS           reduce using rule 139 (if_statement)
    MINUS           [reduce using rule 155 (statement)]
    WAVE            reduce using rule 139 (if_statement)
    WAVE            [reduce using rule 155 (statement)]
    EXL_MARK        reduce using rule 139 (if_statement)
    EXL_MARK        [reduce using rule 155 (statement)]
    INTEGER_CONST   reduce using rule 139 (if_statement)
    INTEGER_CONST   [reduce using rule 155 (statement)]
    FLOATING_CONST  reduce using rule 139 (if_statement)
    FLOATING_CONST  [reduce using rule 155 (statement)]
    CHAR_CONST      reduce using rule 139 (if_statement)
    CHAR_CONST      [reduce using rule 155 (statement)]
    IDENTIFIER      reduce using rule 139 (if_statement)
    IDENTIFIER      [reduce using rule 155 (statement)]
    STRING_LITERAL  reduce using rule 139 (if_statement)
    STRING_LITERAL  [reduce using rule 155 (statement)]
    $default        reduce using rule 139 (if_statement)


State 262

  140 if_statement: IF LBRACKET expression_list RBRACKET statement .

    $default  reduce using rule 140 (if_statement)


State 263

  133 while_loop: WHILE LBRACKET expression_list RBRACKET compound_statement .
  155 statement: compound_statement .

    ELSE            reduce using rule 133 (while_loop)
    ELSE            [reduce using rule 155 (statement)]
    RETURN          reduce using rule 133 (while_loop)
    RETURN          [reduce using rule 155 (statement)]
    FOR             reduce using rule 133 (while_loop)
    FOR             [reduce using rule 155 (statement)]
    DO              reduce using rule 133 (while_loop)
    DO              [reduce using rule 155 (statement)]
    IF              reduce using rule 133 (while_loop)
    IF              [reduce using rule 155 (statement)]
    WHILE           reduce using rule 133 (while_loop)
    WHILE           [reduce using rule 155 (statement)]
    LBRACKET        reduce using rule 133 (while_loop)
    LBRACKET        [reduce using rule 155 (statement)]
    LCURLY          reduce using rule 133 (while_loop)
    LCURLY          [reduce using rule 155 (statement)]
    RCURLY          reduce using rule 133 (while_loop)
    RCURLY          [reduce using rule 155 (statement)]
    PLUS_PLUS       reduce using rule 133 (while_loop)
    PLUS_PLUS       [reduce using rule 155 (statement)]
    MINUS_MINUS     reduce using rule 133 (while_loop)
    MINUS_MINUS     [reduce using rule 155 (statement)]
    SIZEOF          reduce using rule 133 (while_loop)
    SIZEOF          [reduce using rule 155 (statement)]
    SEMI_COLON      reduce using rule 133 (while_loop)
    SEMI_COLON      [reduce using rule 155 (statement)]
    BITWISE_AND     reduce using rule 133 (while_loop)
    BITWISE_AND     [reduce using rule 155 (statement)]
    MULT            reduce using rule 133 (while_loop)
    MULT            [reduce using rule 155 (statement)]
    PLUS            reduce using rule 133 (while_loop)
    PLUS            [reduce using rule 155 (statement)]
    MINUS           reduce using rule 133 (while_loop)
    MINUS           [reduce using rule 155 (statement)]
    WAVE            reduce using rule 133 (while_loop)
    WAVE            [reduce using rule 155 (statement)]
    EXL_MARK        reduce using rule 133 (while_loop)
    EXL_MARK        [reduce using rule 155 (statement)]
    INTEGER_CONST   reduce using rule 133 (while_loop)
    INTEGER_CONST   [reduce using rule 155 (statement)]
    FLOATING_CONST  reduce using rule 133 (while_loop)
    FLOATING_CONST  [reduce using rule 155 (statement)]
    CHAR_CONST      reduce using rule 133 (while_loop)
    CHAR_CONST      [reduce using rule 155 (statement)]
    IDENTIFIER      reduce using rule 133 (while_loop)
    IDENTIFIER      [reduce using rule 155 (statement)]
    STRING_LITERAL  reduce using rule 133 (while_loop)
    STRING_LITERAL  [reduce using rule 155 (statement)]
    $default        reduce using rule 133 (while_loop)


State 264

  134 while_loop: WHILE LBRACKET expression_list RBRACKET statement .

    $default  reduce using rule 134 (while_loop)


State 265

  105 expression_list: expression_list . COMMA expression
  128 for_loop_decl_statement: SEMI_COLON expression_list SEMI_COLON expression_list .

    COMMA  shift, and go to state 220

    $default  reduce using rule 128 (for_loop_decl_statement)


State 266

  105 expression_list: expression_list . COMMA expression
  127 for_loop_decl_statement: expression_list SEMI_COLON SEMI_COLON expression_list .

    COMMA  shift, and go to state 220

    $default  reduce using rule 127 (for_loop_decl_statement)


State 267

  125 for_loop_decl_statement: expression_list SEMI_COLON expression_list SEMI_COLON . expression_list
  126                        | expression_list SEMI_COLON expression_list SEMI_COLON .

    LBRACKET        shift, and go to state 37
    PLUS_PLUS       shift, and go to state 39
    MINUS_MINUS     shift, and go to state 40
    SIZEOF          shift, and go to state 41
    BITWISE_AND     shift, and go to state 42
    MULT            shift, and go to state 43
    PLUS            shift, and go to state 44
    MINUS           shift, and go to state 45
    WAVE            shift, and go to state 46
    EXL_MARK        shift, and go to state 47
    INTEGER_CONST   shift, and go to state 48
    FLOATING_CONST  shift, and go to state 49
    CHAR_CONST      shift, and go to state 50
    IDENTIFIER      shift, and go to state 51
    STRING_LITERAL  shift, and go to state 52

    $default  reduce using rule 126 (for_loop_decl_statement)

    CONSTANT                   go to state 53
    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    UNARY_OPERATOR             go to state 58
    cast_expression            go to state 59
    multiplicative_expression  go to state 60
    additive_expression        go to state 61
    shift_expression           go to state 62
    relational_expression      go to state 63
    equality_expression        go to state 64
    and_expression             go to state 65
    exclusive_or_expression    go to state 66
    inclusive_or_expression    go to state 67
    logical_and_expression     go to state 68
    logical_or_expression      go to state 69
    conditional_expression     go to state 70
    assignment_expression      go to state 71
    expression                 go to state 187
    expression_list            go to state 270
    bracketed_identifier       go to state 73


State 268

  121 do_while_loop: DO compound_statement WHILE LBRACKET expression_list RBRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 271


State 269

  122 do_while_loop: DO statement WHILE LBRACKET expression_list RBRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 272


State 270

  105 expression_list: expression_list . COMMA expression
  125 for_loop_decl_statement: expression_list SEMI_COLON expression_list SEMI_COLON expression_list .

    COMMA  shift, and go to state 220

    $default  reduce using rule 125 (for_loop_decl_statement)


State 271

  121 do_while_loop: DO compound_statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON .

    $default  reduce using rule 121 (do_while_loop)


State 272

  122 do_while_loop: DO statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON .

    $default  reduce using rule 122 (do_while_loop)
