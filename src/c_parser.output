Nonterminals useless in grammar

   var_or_const
   conditional_expression


Terminals unused in grammar

   AUTO
   DOUBLE
   STRUCT
   BREAK
   LONG
   SWITCH
   CASE
   ENUM
   REGISTER
   TYPEDEF
   CHAR
   EXTERN
   UNION
   CONST
   FLOAT
   SHORT
   UNSIGNED
   CONTINUE
   SIGNED
   VOID
   DEFAULT
   GOTO
   VOLATILE
   STATIC
   LSQUARE
   RSQUARE
   THREE_DOTS
   DOT
   PTR_OP
   PLUS_PLUS
   MINUS_MINUS
   SIZEOF
   Q_MARK
   COLON
   HASH
   HASH_HASH
   WAVE
   EXL_MARK
   STRING_LITERAL


Rules useless in grammar

  107 var_or_const: IDENTIFIER
  108             | CONSTANT

  109 conditional_expression: equality_expression Q_MARK arithmetic_expression COLON arithmetic_expression


Rules useless in parser due to conflicts

   20 equality_expression: IDENTIFIER

   45 arithmetic_expression: IDENTIFIER


State 39 conflicts: 21 reduce/reduce
State 47 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 66 conflicts: 10 shift/reduce
State 83 conflicts: 1 shift/reduce
State 92 conflicts: 20 reduce/reduce
State 93 conflicts: 8 shift/reduce
State 104 conflicts: 1 shift/reduce
State 111 conflicts: 9 shift/reduce, 1 reduce/reduce
State 113 conflicts: 1 shift/reduce, 1 reduce/reduce
State 157 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: fn_declaration
    2        | declaration
    3        | program fn_declaration
    4        | program declaration

    5 CONSTANT: FLOATING_CONST
    6         | INTEGER_CONST
    7         | CHAR_CONST

    8 declaration: INT initialization_list SEMI_COLON

    9 initialization_list: bracketed_identifier
   10                    | assignment_expression
   11                    | initialization_list COMMA assignment_expression
   12                    | initialization_list COMMA bracketed_identifier

   13 bracketed_identifier: IDENTIFIER
   14                     | LBRACKET bracketed_identifier RBRACKET

   15 assignment_expression_list: assignment_expression
   16                           | assignment_expression_list COMMA assignment_expression

   17 equality_expression: bracketed_identifier COMPARISON_OPERATOR bracketed_identifier
   18                    | bracketed_const
   19                    | bracketed_identifier
   20                    | IDENTIFIER
   21                    | arithmetic_expression COMPARISON_OPERATOR arithmetic_expression
   22                    | LBRACKET equality_expression RBRACKET

   23 bracketed_const: CONSTANT
   24                | LBRACKET bracketed_const RBRACKET

   25 COMPARISON_OPERATOR: LOGICAL_EQUALITY
   26                    | LOGICAL_INEQUALITY
   27                    | LOGICAL_AND
   28                    | LOGICAL_OR
   29                    | LOGICAL_MORE
   30                    | LOGICAL_LESS
   31                    | LESS_OR_EQUAL
   32                    | MORE_OR_EQUAL

   33 assignment_expression: bracketed_identifier ASSIGNMENT_OPERATOR arithmetic_expression

   34 ASSIGNMENT_OPERATOR: EQUALS
   35                    | MULT_EQUALS
   36                    | DIV_EQUALS
   37                    | PERCENT_EQUALS
   38                    | PLUS_EQUALS
   39                    | MINUS_EQUALS
   40                    | LSHIFT_EQUALS
   41                    | RSHIFT_EQUALS
   42                    | AND_EQUALS
   43                    | XOR_EQUALS
   44                    | OR_EQUALS

   45 arithmetic_expression: IDENTIFIER
   46                      | bracketed_identifier
   47                      | bracketed_const
   48                      | arithmetic_expression ARITHMETIC_OPERATOR arithmetic_expression
   49                      | LBRACKET arithmetic_expression RBRACKET

   50 ARITHMETIC_OPERATOR: BITWISE_XOR
   51                    | BITWISE_OR
   52                    | BITWISE_AND
   53                    | MULT
   54                    | PLUS
   55                    | MINUS
   56                    | DIV
   57                    | PERCENT
   58                    | LSHIFT
   59                    | RSHIFT

   60 expression: equality_expression
   61           | assignment_expression

   62 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

   63 fn_params_list: INT bracketed_identifier
   64               | fn_params_list COMMA INT bracketed_identifier
   65               | %empty

   66 loop: for_loop
   67     | while_loop
   68     | do_while_loop

   69 do_while_loop: DO compound_statement WHILE LBRACKET expression RBRACKET SEMI_COLON
   70              | DO statement WHILE LBRACKET expression RBRACKET SEMI_COLON

   71 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET compound_statement
   72         | FOR LBRACKET for_loop_decl_statement RBRACKET statement

   73 for_loop_decl_statement: assignment_expression_list SEMI_COLON equality_expression SEMI_COLON assignment_expression_list
   74                        | assignment_expression_list SEMI_COLON equality_expression SEMI_COLON
   75                        | assignment_expression_list SEMI_COLON SEMI_COLON assignment_expression_list
   76                        | SEMI_COLON equality_expression SEMI_COLON assignment_expression_list
   77                        | assignment_expression_list SEMI_COLON SEMI_COLON
   78                        | SEMI_COLON SEMI_COLON assignment_expression_list
   79                        | SEMI_COLON equality_expression SEMI_COLON
   80                        | SEMI_COLON SEMI_COLON

   81 while_loop: WHILE LBRACKET equality_expression RBRACKET compound_statement
   82           | WHILE LBRACKET equality_expression RBRACKET statement

   83 if_block_statement: if_statement
   84                   | if_statement else_statement_list

   85 else_statement_list: else_statement
   86                    | else_statement_list else_statement

   87 if_statement: IF LBRACKET equality_expression RBRACKET compound_statement
   88             | IF LBRACKET equality_expression RBRACKET statement

   89 else_statement: ELSE compound_statement
   90               | ELSE statement

   91 compound_statement: LCURLY declaration_list statement_list RCURLY
   92                   | LCURLY statement_list RCURLY
   93                   | LCURLY declaration_list RCURLY
   94                   | LCURLY RCURLY

   95 declaration_list: declaration
   96                 | declaration_list declaration

   97 statement_list: statement
   98               | statement_list statement

   99 statement: loop
  100          | if_block_statement
  101          | semi_colon_statement

  102 semi_colon_statement: return_statement
  103                     | assignment_expression SEMI_COLON
  104                     | SEMI_COLON

  105 return_statement: RETURN equality_expression SEMI_COLON
  106                 | RETURN SEMI_COLON


Terminals, with rules where they appear

$end (0) 0
error (256)
AUTO (258)
DOUBLE (259)
INT (260) 8 62 63 64
STRUCT (261)
BREAK (262)
ELSE (263) 89 90
LONG (264)
SWITCH (265)
CASE (266)
ENUM (267)
REGISTER (268)
TYPEDEF (269)
CHAR (270)
EXTERN (271)
RETURN (272) 105 106
UNION (273)
CONST (274)
FLOAT (275)
SHORT (276)
UNSIGNED (277)
CONTINUE (278)
FOR (279) 71 72
SIGNED (280)
VOID (281)
DEFAULT (282)
GOTO (283)
VOLATILE (284)
DO (285) 69 70
IF (286) 87 88
STATIC (287)
WHILE (288) 69 70 81 82
LSQUARE (289)
RSQUARE (290)
LBRACKET (291) 14 22 24 49 62 69 70 71 72 81 82 87 88
RBRACKET (292) 14 22 24 49 62 69 70 71 72 81 82 87 88
LCURLY (293) 91 92 93 94
RCURLY (294) 91 92 93 94
THREE_DOTS (295)
DOT (296)
PTR_OP (297)
PLUS_PLUS (298)
MINUS_MINUS (299)
SIZEOF (300)
LSHIFT (301) 58
RSHIFT (302) 59
LESS_OR_EQUAL (303) 31
MORE_OR_EQUAL (304) 32
LOGICAL_EQUALITY (305) 25
LOGICAL_INEQUALITY (306) 26
LOGICAL_AND (307) 27
LOGICAL_OR (308) 28
Q_MARK (309)
COLON (310)
MULT_EQUALS (311) 35
DIV_EQUALS (312) 36
PERCENT_EQUALS (313) 37
PLUS_EQUALS (314) 38
MINUS_EQUALS (315) 39
LSHIFT_EQUALS (316) 40
RSHIFT_EQUALS (317) 41
AND_EQUALS (318) 42
XOR_EQUALS (319) 43
OR_EQUALS (320) 44
COMMA (321) 11 12 16 64
HASH (322)
HASH_HASH (323)
SEMI_COLON (324) 8 69 70 73 74 75 76 77 78 79 80 103 104 105 106
EQUALS (325) 34
BITWISE_OR (326) 51
BITWISE_AND (327) 52
BITWISE_XOR (328) 50
MULT (329) 53
PLUS (330) 54
MINUS (331) 55
WAVE (332)
EXL_MARK (333)
DIV (334) 56
PERCENT (335) 57
LOGICAL_MORE (336) 29
LOGICAL_LESS (337) 30
FLOATING_CONST (338) 5
INTEGER_CONST (339) 6
CHAR_CONST (340) 7
IDENTIFIER (341) 13 20 45 62
STRING_LITERAL (342)


Nonterminals, with rules where they appear

$accept (88)
    on left: 0
program (89)
    on left: 1 2 3 4, on right: 0 3 4
CONSTANT (90)
    on left: 5 6 7, on right: 23
declaration (91)
    on left: 8, on right: 2 4 95 96
initialization_list (92)
    on left: 9 10 11 12, on right: 8 11 12
bracketed_identifier (93)
    on left: 13 14, on right: 9 12 14 17 19 33 46 63 64
assignment_expression_list (94)
    on left: 15 16, on right: 16 73 74 75 76 77 78
equality_expression (95)
    on left: 17 18 19 20 21 22, on right: 22 60 73 74 76 79 81 82 87
    88 105
bracketed_const (96)
    on left: 23 24, on right: 18 24 47
COMPARISON_OPERATOR (97)
    on left: 25 26 27 28 29 30 31 32, on right: 17 21
assignment_expression (98)
    on left: 33, on right: 10 11 15 16 61 103
ASSIGNMENT_OPERATOR (99)
    on left: 34 35 36 37 38 39 40 41 42 43 44, on right: 33
arithmetic_expression (100)
    on left: 45 46 47 48 49, on right: 21 33 48 49
ARITHMETIC_OPERATOR (101)
    on left: 50 51 52 53 54 55 56 57 58 59, on right: 48
expression (102)
    on left: 60 61, on right: 69 70
fn_declaration (103)
    on left: 62, on right: 1 3
fn_params_list (104)
    on left: 63 64 65, on right: 62 64
loop (105)
    on left: 66 67 68, on right: 99
do_while_loop (106)
    on left: 69 70, on right: 68
for_loop (107)
    on left: 71 72, on right: 66
for_loop_decl_statement (108)
    on left: 73 74 75 76 77 78 79 80, on right: 71 72
while_loop (109)
    on left: 81 82, on right: 67
if_block_statement (110)
    on left: 83 84, on right: 100
else_statement_list (111)
    on left: 85 86, on right: 84 86
if_statement (112)
    on left: 87 88, on right: 83 84
else_statement (113)
    on left: 89 90, on right: 85 86
compound_statement (114)
    on left: 91 92 93 94, on right: 62 69 71 81 87 89
declaration_list (115)
    on left: 95 96, on right: 91 93 96
statement_list (116)
    on left: 97 98, on right: 91 92 98
statement (117)
    on left: 99 100 101, on right: 70 72 82 88 90 97 98
semi_colon_statement (118)
    on left: 102 103 104, on right: 101
return_statement (119)
    on left: 105 106, on right: 102


State 0

    0 $accept: . program $end

    INT  shift, and go to state 1

    program         go to state 2
    declaration     go to state 3
    fn_declaration  go to state 4


State 1

    8 declaration: INT . initialization_list SEMI_COLON
   62 fn_declaration: INT . IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 6

    initialization_list    go to state 7
    bracketed_identifier   go to state 8
    assignment_expression  go to state 9


State 2

    0 $accept: program . $end
    3 program: program . fn_declaration
    4        | program . declaration

    $end  shift, and go to state 10
    INT   shift, and go to state 1

    declaration     go to state 11
    fn_declaration  go to state 12


State 3

    2 program: declaration .

    $default  reduce using rule 2 (program)


State 4

    1 program: fn_declaration .

    $default  reduce using rule 1 (program)


State 5

   14 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier  go to state 14


State 6

   13 bracketed_identifier: IDENTIFIER .
   62 fn_declaration: INT IDENTIFIER . LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET  shift, and go to state 15

    $default  reduce using rule 13 (bracketed_identifier)


State 7

    8 declaration: INT initialization_list . SEMI_COLON
   11 initialization_list: initialization_list . COMMA assignment_expression
   12                    | initialization_list . COMMA bracketed_identifier

    COMMA       shift, and go to state 16
    SEMI_COLON  shift, and go to state 17


State 8

    9 initialization_list: bracketed_identifier .
   33 assignment_expression: bracketed_identifier . ASSIGNMENT_OPERATOR arithmetic_expression

    MULT_EQUALS     shift, and go to state 18
    DIV_EQUALS      shift, and go to state 19
    PERCENT_EQUALS  shift, and go to state 20
    PLUS_EQUALS     shift, and go to state 21
    MINUS_EQUALS    shift, and go to state 22
    LSHIFT_EQUALS   shift, and go to state 23
    RSHIFT_EQUALS   shift, and go to state 24
    AND_EQUALS      shift, and go to state 25
    XOR_EQUALS      shift, and go to state 26
    OR_EQUALS       shift, and go to state 27
    EQUALS          shift, and go to state 28

    $default  reduce using rule 9 (initialization_list)

    ASSIGNMENT_OPERATOR  go to state 29


State 9

   10 initialization_list: assignment_expression .

    $default  reduce using rule 10 (initialization_list)


State 10

    0 $accept: program $end .

    $default  accept


State 11

    4 program: program declaration .

    $default  reduce using rule 4 (program)


State 12

    3 program: program fn_declaration .

    $default  reduce using rule 3 (program)


State 13

   13 bracketed_identifier: IDENTIFIER .

    $default  reduce using rule 13 (bracketed_identifier)


State 14

   14 bracketed_identifier: LBRACKET bracketed_identifier . RBRACKET

    RBRACKET  shift, and go to state 30


State 15

   62 fn_declaration: INT IDENTIFIER LBRACKET . fn_params_list RBRACKET compound_statement

    INT  shift, and go to state 31

    $default  reduce using rule 65 (fn_params_list)

    fn_params_list  go to state 32


State 16

   11 initialization_list: initialization_list COMMA . assignment_expression
   12                    | initialization_list COMMA . bracketed_identifier

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 33
    assignment_expression  go to state 34


State 17

    8 declaration: INT initialization_list SEMI_COLON .

    $default  reduce using rule 8 (declaration)


State 18

   35 ASSIGNMENT_OPERATOR: MULT_EQUALS .

    $default  reduce using rule 35 (ASSIGNMENT_OPERATOR)


State 19

   36 ASSIGNMENT_OPERATOR: DIV_EQUALS .

    $default  reduce using rule 36 (ASSIGNMENT_OPERATOR)


State 20

   37 ASSIGNMENT_OPERATOR: PERCENT_EQUALS .

    $default  reduce using rule 37 (ASSIGNMENT_OPERATOR)


State 21

   38 ASSIGNMENT_OPERATOR: PLUS_EQUALS .

    $default  reduce using rule 38 (ASSIGNMENT_OPERATOR)


State 22

   39 ASSIGNMENT_OPERATOR: MINUS_EQUALS .

    $default  reduce using rule 39 (ASSIGNMENT_OPERATOR)


State 23

   40 ASSIGNMENT_OPERATOR: LSHIFT_EQUALS .

    $default  reduce using rule 40 (ASSIGNMENT_OPERATOR)


State 24

   41 ASSIGNMENT_OPERATOR: RSHIFT_EQUALS .

    $default  reduce using rule 41 (ASSIGNMENT_OPERATOR)


State 25

   42 ASSIGNMENT_OPERATOR: AND_EQUALS .

    $default  reduce using rule 42 (ASSIGNMENT_OPERATOR)


State 26

   43 ASSIGNMENT_OPERATOR: XOR_EQUALS .

    $default  reduce using rule 43 (ASSIGNMENT_OPERATOR)


State 27

   44 ASSIGNMENT_OPERATOR: OR_EQUALS .

    $default  reduce using rule 44 (ASSIGNMENT_OPERATOR)


State 28

   34 ASSIGNMENT_OPERATOR: EQUALS .

    $default  reduce using rule 34 (ASSIGNMENT_OPERATOR)


State 29

   33 assignment_expression: bracketed_identifier ASSIGNMENT_OPERATOR . arithmetic_expression

    LBRACKET        shift, and go to state 35
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 39

    CONSTANT               go to state 40
    bracketed_identifier   go to state 41
    bracketed_const        go to state 42
    arithmetic_expression  go to state 43


State 30

   14 bracketed_identifier: LBRACKET bracketed_identifier RBRACKET .

    $default  reduce using rule 14 (bracketed_identifier)


State 31

   63 fn_params_list: INT . bracketed_identifier

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier  go to state 44


State 32

   62 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list . RBRACKET compound_statement
   64 fn_params_list: fn_params_list . COMMA INT bracketed_identifier

    RBRACKET  shift, and go to state 45
    COMMA     shift, and go to state 46


State 33

   12 initialization_list: initialization_list COMMA bracketed_identifier .
   33 assignment_expression: bracketed_identifier . ASSIGNMENT_OPERATOR arithmetic_expression

    MULT_EQUALS     shift, and go to state 18
    DIV_EQUALS      shift, and go to state 19
    PERCENT_EQUALS  shift, and go to state 20
    PLUS_EQUALS     shift, and go to state 21
    MINUS_EQUALS    shift, and go to state 22
    LSHIFT_EQUALS   shift, and go to state 23
    RSHIFT_EQUALS   shift, and go to state 24
    AND_EQUALS      shift, and go to state 25
    XOR_EQUALS      shift, and go to state 26
    OR_EQUALS       shift, and go to state 27
    EQUALS          shift, and go to state 28

    $default  reduce using rule 12 (initialization_list)

    ASSIGNMENT_OPERATOR  go to state 29


State 34

   11 initialization_list: initialization_list COMMA assignment_expression .

    $default  reduce using rule 11 (initialization_list)


State 35

   14 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET
   24 bracketed_const: LBRACKET . bracketed_const RBRACKET
   49 arithmetic_expression: LBRACKET . arithmetic_expression RBRACKET

    LBRACKET        shift, and go to state 35
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 39

    CONSTANT               go to state 40
    bracketed_identifier   go to state 47
    bracketed_const        go to state 48
    arithmetic_expression  go to state 49


State 36

    5 CONSTANT: FLOATING_CONST .

    $default  reduce using rule 5 (CONSTANT)


State 37

    6 CONSTANT: INTEGER_CONST .

    $default  reduce using rule 6 (CONSTANT)


State 38

    7 CONSTANT: CHAR_CONST .

    $default  reduce using rule 7 (CONSTANT)


State 39

   13 bracketed_identifier: IDENTIFIER .
   45 arithmetic_expression: IDENTIFIER .

    RBRACKET            reduce using rule 13 (bracketed_identifier)
    RBRACKET            [reduce using rule 45 (arithmetic_expression)]
    LSHIFT              reduce using rule 13 (bracketed_identifier)
    LSHIFT              [reduce using rule 45 (arithmetic_expression)]
    RSHIFT              reduce using rule 13 (bracketed_identifier)
    RSHIFT              [reduce using rule 45 (arithmetic_expression)]
    LESS_OR_EQUAL       reduce using rule 13 (bracketed_identifier)
    LESS_OR_EQUAL       [reduce using rule 45 (arithmetic_expression)]
    MORE_OR_EQUAL       reduce using rule 13 (bracketed_identifier)
    MORE_OR_EQUAL       [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_EQUALITY    reduce using rule 13 (bracketed_identifier)
    LOGICAL_EQUALITY    [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_INEQUALITY  reduce using rule 13 (bracketed_identifier)
    LOGICAL_INEQUALITY  [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_AND         reduce using rule 13 (bracketed_identifier)
    LOGICAL_AND         [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_OR          reduce using rule 13 (bracketed_identifier)
    LOGICAL_OR          [reduce using rule 45 (arithmetic_expression)]
    COMMA               reduce using rule 13 (bracketed_identifier)
    COMMA               [reduce using rule 45 (arithmetic_expression)]
    SEMI_COLON          reduce using rule 13 (bracketed_identifier)
    SEMI_COLON          [reduce using rule 45 (arithmetic_expression)]
    BITWISE_OR          reduce using rule 13 (bracketed_identifier)
    BITWISE_OR          [reduce using rule 45 (arithmetic_expression)]
    BITWISE_AND         reduce using rule 13 (bracketed_identifier)
    BITWISE_AND         [reduce using rule 45 (arithmetic_expression)]
    BITWISE_XOR         reduce using rule 13 (bracketed_identifier)
    BITWISE_XOR         [reduce using rule 45 (arithmetic_expression)]
    MULT                reduce using rule 13 (bracketed_identifier)
    MULT                [reduce using rule 45 (arithmetic_expression)]
    PLUS                reduce using rule 13 (bracketed_identifier)
    PLUS                [reduce using rule 45 (arithmetic_expression)]
    MINUS               reduce using rule 13 (bracketed_identifier)
    MINUS               [reduce using rule 45 (arithmetic_expression)]
    DIV                 reduce using rule 13 (bracketed_identifier)
    DIV                 [reduce using rule 45 (arithmetic_expression)]
    PERCENT             reduce using rule 13 (bracketed_identifier)
    PERCENT             [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_MORE        reduce using rule 13 (bracketed_identifier)
    LOGICAL_MORE        [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_LESS        reduce using rule 13 (bracketed_identifier)
    LOGICAL_LESS        [reduce using rule 45 (arithmetic_expression)]
    $default            reduce using rule 13 (bracketed_identifier)


State 40

   23 bracketed_const: CONSTANT .

    $default  reduce using rule 23 (bracketed_const)


State 41

   46 arithmetic_expression: bracketed_identifier .

    $default  reduce using rule 46 (arithmetic_expression)


State 42

   47 arithmetic_expression: bracketed_const .

    $default  reduce using rule 47 (arithmetic_expression)


State 43

   33 assignment_expression: bracketed_identifier ASSIGNMENT_OPERATOR arithmetic_expression .
   48 arithmetic_expression: arithmetic_expression . ARITHMETIC_OPERATOR arithmetic_expression

    LSHIFT       shift, and go to state 50
    RSHIFT       shift, and go to state 51
    BITWISE_OR   shift, and go to state 52
    BITWISE_AND  shift, and go to state 53
    BITWISE_XOR  shift, and go to state 54
    MULT         shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    DIV          shift, and go to state 58
    PERCENT      shift, and go to state 59

    $default  reduce using rule 33 (assignment_expression)

    ARITHMETIC_OPERATOR  go to state 60


State 44

   63 fn_params_list: INT bracketed_identifier .

    $default  reduce using rule 63 (fn_params_list)


State 45

   62 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET . compound_statement

    LCURLY  shift, and go to state 61

    compound_statement  go to state 62


State 46

   64 fn_params_list: fn_params_list COMMA . INT bracketed_identifier

    INT  shift, and go to state 63


State 47

   14 bracketed_identifier: LBRACKET bracketed_identifier . RBRACKET
   46 arithmetic_expression: bracketed_identifier .

    RBRACKET  shift, and go to state 30

    RBRACKET  [reduce using rule 46 (arithmetic_expression)]
    $default  reduce using rule 46 (arithmetic_expression)


State 48

   24 bracketed_const: LBRACKET bracketed_const . RBRACKET
   47 arithmetic_expression: bracketed_const .

    RBRACKET  shift, and go to state 64

    RBRACKET  [reduce using rule 47 (arithmetic_expression)]
    $default  reduce using rule 47 (arithmetic_expression)


State 49

   48 arithmetic_expression: arithmetic_expression . ARITHMETIC_OPERATOR arithmetic_expression
   49                      | LBRACKET arithmetic_expression . RBRACKET

    RBRACKET     shift, and go to state 65
    LSHIFT       shift, and go to state 50
    RSHIFT       shift, and go to state 51
    BITWISE_OR   shift, and go to state 52
    BITWISE_AND  shift, and go to state 53
    BITWISE_XOR  shift, and go to state 54
    MULT         shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    DIV          shift, and go to state 58
    PERCENT      shift, and go to state 59

    ARITHMETIC_OPERATOR  go to state 60


State 50

   58 ARITHMETIC_OPERATOR: LSHIFT .

    $default  reduce using rule 58 (ARITHMETIC_OPERATOR)


State 51

   59 ARITHMETIC_OPERATOR: RSHIFT .

    $default  reduce using rule 59 (ARITHMETIC_OPERATOR)


State 52

   51 ARITHMETIC_OPERATOR: BITWISE_OR .

    $default  reduce using rule 51 (ARITHMETIC_OPERATOR)


State 53

   52 ARITHMETIC_OPERATOR: BITWISE_AND .

    $default  reduce using rule 52 (ARITHMETIC_OPERATOR)


State 54

   50 ARITHMETIC_OPERATOR: BITWISE_XOR .

    $default  reduce using rule 50 (ARITHMETIC_OPERATOR)


State 55

   53 ARITHMETIC_OPERATOR: MULT .

    $default  reduce using rule 53 (ARITHMETIC_OPERATOR)


State 56

   54 ARITHMETIC_OPERATOR: PLUS .

    $default  reduce using rule 54 (ARITHMETIC_OPERATOR)


State 57

   55 ARITHMETIC_OPERATOR: MINUS .

    $default  reduce using rule 55 (ARITHMETIC_OPERATOR)


State 58

   56 ARITHMETIC_OPERATOR: DIV .

    $default  reduce using rule 56 (ARITHMETIC_OPERATOR)


State 59

   57 ARITHMETIC_OPERATOR: PERCENT .

    $default  reduce using rule 57 (ARITHMETIC_OPERATOR)


State 60

   48 arithmetic_expression: arithmetic_expression ARITHMETIC_OPERATOR . arithmetic_expression

    LBRACKET        shift, and go to state 35
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 39

    CONSTANT               go to state 40
    bracketed_identifier   go to state 41
    bracketed_const        go to state 42
    arithmetic_expression  go to state 66


State 61

   91 compound_statement: LCURLY . declaration_list statement_list RCURLY
   92                   | LCURLY . statement_list RCURLY
   93                   | LCURLY . declaration_list RCURLY
   94                   | LCURLY . RCURLY

    INT         shift, and go to state 67
    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    RCURLY      shift, and go to state 73
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    declaration            go to state 75
    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    declaration_list       go to state 84
    statement_list         go to state 85
    statement              go to state 86
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 62

   62 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement .

    $default  reduce using rule 62 (fn_declaration)


State 63

   64 fn_params_list: fn_params_list COMMA INT . bracketed_identifier

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier  go to state 89


State 64

   24 bracketed_const: LBRACKET bracketed_const RBRACKET .

    $default  reduce using rule 24 (bracketed_const)


State 65

   49 arithmetic_expression: LBRACKET arithmetic_expression RBRACKET .

    $default  reduce using rule 49 (arithmetic_expression)


State 66

   48 arithmetic_expression: arithmetic_expression . ARITHMETIC_OPERATOR arithmetic_expression
   48                      | arithmetic_expression ARITHMETIC_OPERATOR arithmetic_expression .

    LSHIFT       shift, and go to state 50
    RSHIFT       shift, and go to state 51
    BITWISE_OR   shift, and go to state 52
    BITWISE_AND  shift, and go to state 53
    BITWISE_XOR  shift, and go to state 54
    MULT         shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    DIV          shift, and go to state 58
    PERCENT      shift, and go to state 59

    LSHIFT       [reduce using rule 48 (arithmetic_expression)]
    RSHIFT       [reduce using rule 48 (arithmetic_expression)]
    BITWISE_OR   [reduce using rule 48 (arithmetic_expression)]
    BITWISE_AND  [reduce using rule 48 (arithmetic_expression)]
    BITWISE_XOR  [reduce using rule 48 (arithmetic_expression)]
    MULT         [reduce using rule 48 (arithmetic_expression)]
    PLUS         [reduce using rule 48 (arithmetic_expression)]
    MINUS        [reduce using rule 48 (arithmetic_expression)]
    DIV          [reduce using rule 48 (arithmetic_expression)]
    PERCENT      [reduce using rule 48 (arithmetic_expression)]
    $default     reduce using rule 48 (arithmetic_expression)

    ARITHMETIC_OPERATOR  go to state 60


State 67

    8 declaration: INT . initialization_list SEMI_COLON

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    initialization_list    go to state 7
    bracketed_identifier   go to state 8
    assignment_expression  go to state 9


State 68

  105 return_statement: RETURN . equality_expression SEMI_COLON
  106                 | RETURN . SEMI_COLON

    LBRACKET        shift, and go to state 90
    SEMI_COLON      shift, and go to state 91
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 93
    equality_expression    go to state 94
    bracketed_const        go to state 95
    arithmetic_expression  go to state 96


State 69

   71 for_loop: FOR . LBRACKET for_loop_decl_statement RBRACKET compound_statement
   72         | FOR . LBRACKET for_loop_decl_statement RBRACKET statement

    LBRACKET  shift, and go to state 97


State 70

   69 do_while_loop: DO . compound_statement WHILE LBRACKET expression RBRACKET SEMI_COLON
   70              | DO . statement WHILE LBRACKET expression RBRACKET SEMI_COLON

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    LCURLY      shift, and go to state 61
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    compound_statement     go to state 98
    statement              go to state 99
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 71

   87 if_statement: IF . LBRACKET equality_expression RBRACKET compound_statement
   88             | IF . LBRACKET equality_expression RBRACKET statement

    LBRACKET  shift, and go to state 100


State 72

   81 while_loop: WHILE . LBRACKET equality_expression RBRACKET compound_statement
   82           | WHILE . LBRACKET equality_expression RBRACKET statement

    LBRACKET  shift, and go to state 101


State 73

   94 compound_statement: LCURLY RCURLY .

    $default  reduce using rule 94 (compound_statement)


State 74

  104 semi_colon_statement: SEMI_COLON .

    $default  reduce using rule 104 (semi_colon_statement)


State 75

   95 declaration_list: declaration .

    $default  reduce using rule 95 (declaration_list)


State 76

   33 assignment_expression: bracketed_identifier . ASSIGNMENT_OPERATOR arithmetic_expression

    MULT_EQUALS     shift, and go to state 18
    DIV_EQUALS      shift, and go to state 19
    PERCENT_EQUALS  shift, and go to state 20
    PLUS_EQUALS     shift, and go to state 21
    MINUS_EQUALS    shift, and go to state 22
    LSHIFT_EQUALS   shift, and go to state 23
    RSHIFT_EQUALS   shift, and go to state 24
    AND_EQUALS      shift, and go to state 25
    XOR_EQUALS      shift, and go to state 26
    OR_EQUALS       shift, and go to state 27
    EQUALS          shift, and go to state 28

    ASSIGNMENT_OPERATOR  go to state 29


State 77

  103 semi_colon_statement: assignment_expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 102


State 78

   99 statement: loop .

    $default  reduce using rule 99 (statement)


State 79

   68 loop: do_while_loop .

    $default  reduce using rule 68 (loop)


State 80

   66 loop: for_loop .

    $default  reduce using rule 66 (loop)


State 81

   67 loop: while_loop .

    $default  reduce using rule 67 (loop)


State 82

  100 statement: if_block_statement .

    $default  reduce using rule 100 (statement)


State 83

   83 if_block_statement: if_statement .
   84                   | if_statement . else_statement_list

    ELSE  shift, and go to state 103

    ELSE      [reduce using rule 83 (if_block_statement)]
    $default  reduce using rule 83 (if_block_statement)

    else_statement_list  go to state 104
    else_statement       go to state 105


State 84

   91 compound_statement: LCURLY declaration_list . statement_list RCURLY
   93                   | LCURLY declaration_list . RCURLY
   96 declaration_list: declaration_list . declaration

    INT         shift, and go to state 67
    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    RCURLY      shift, and go to state 106
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    declaration            go to state 107
    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    statement_list         go to state 108
    statement              go to state 86
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 85

   92 compound_statement: LCURLY statement_list . RCURLY
   98 statement_list: statement_list . statement

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    RCURLY      shift, and go to state 109
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    statement              go to state 110
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 86

   97 statement_list: statement .

    $default  reduce using rule 97 (statement_list)


State 87

  101 statement: semi_colon_statement .

    $default  reduce using rule 101 (statement)


State 88

  102 semi_colon_statement: return_statement .

    $default  reduce using rule 102 (semi_colon_statement)


State 89

   64 fn_params_list: fn_params_list COMMA INT bracketed_identifier .

    $default  reduce using rule 64 (fn_params_list)


State 90

   14 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET
   22 equality_expression: LBRACKET . equality_expression RBRACKET
   24 bracketed_const: LBRACKET . bracketed_const RBRACKET
   49 arithmetic_expression: LBRACKET . arithmetic_expression RBRACKET

    LBRACKET        shift, and go to state 90
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 111
    equality_expression    go to state 112
    bracketed_const        go to state 113
    arithmetic_expression  go to state 114


State 91

  106 return_statement: RETURN SEMI_COLON .

    $default  reduce using rule 106 (return_statement)


State 92

   13 bracketed_identifier: IDENTIFIER .
   20 equality_expression: IDENTIFIER .
   45 arithmetic_expression: IDENTIFIER .

    RBRACKET            reduce using rule 13 (bracketed_identifier)
    RBRACKET            [reduce using rule 20 (equality_expression)]
    RBRACKET            [reduce using rule 45 (arithmetic_expression)]
    LSHIFT              reduce using rule 13 (bracketed_identifier)
    LSHIFT              [reduce using rule 45 (arithmetic_expression)]
    RSHIFT              reduce using rule 13 (bracketed_identifier)
    RSHIFT              [reduce using rule 45 (arithmetic_expression)]
    LESS_OR_EQUAL       reduce using rule 13 (bracketed_identifier)
    LESS_OR_EQUAL       [reduce using rule 45 (arithmetic_expression)]
    MORE_OR_EQUAL       reduce using rule 13 (bracketed_identifier)
    MORE_OR_EQUAL       [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_EQUALITY    reduce using rule 13 (bracketed_identifier)
    LOGICAL_EQUALITY    [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_INEQUALITY  reduce using rule 13 (bracketed_identifier)
    LOGICAL_INEQUALITY  [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_AND         reduce using rule 13 (bracketed_identifier)
    LOGICAL_AND         [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_OR          reduce using rule 13 (bracketed_identifier)
    LOGICAL_OR          [reduce using rule 45 (arithmetic_expression)]
    SEMI_COLON          reduce using rule 13 (bracketed_identifier)
    SEMI_COLON          [reduce using rule 20 (equality_expression)]
    BITWISE_OR          reduce using rule 13 (bracketed_identifier)
    BITWISE_OR          [reduce using rule 45 (arithmetic_expression)]
    BITWISE_AND         reduce using rule 13 (bracketed_identifier)
    BITWISE_AND         [reduce using rule 45 (arithmetic_expression)]
    BITWISE_XOR         reduce using rule 13 (bracketed_identifier)
    BITWISE_XOR         [reduce using rule 45 (arithmetic_expression)]
    MULT                reduce using rule 13 (bracketed_identifier)
    MULT                [reduce using rule 45 (arithmetic_expression)]
    PLUS                reduce using rule 13 (bracketed_identifier)
    PLUS                [reduce using rule 45 (arithmetic_expression)]
    MINUS               reduce using rule 13 (bracketed_identifier)
    MINUS               [reduce using rule 45 (arithmetic_expression)]
    DIV                 reduce using rule 13 (bracketed_identifier)
    DIV                 [reduce using rule 45 (arithmetic_expression)]
    PERCENT             reduce using rule 13 (bracketed_identifier)
    PERCENT             [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_MORE        reduce using rule 13 (bracketed_identifier)
    LOGICAL_MORE        [reduce using rule 45 (arithmetic_expression)]
    LOGICAL_LESS        reduce using rule 13 (bracketed_identifier)
    LOGICAL_LESS        [reduce using rule 45 (arithmetic_expression)]
    $default            reduce using rule 13 (bracketed_identifier)


State 93

   17 equality_expression: bracketed_identifier . COMPARISON_OPERATOR bracketed_identifier
   19                    | bracketed_identifier .
   46 arithmetic_expression: bracketed_identifier .

    LESS_OR_EQUAL       shift, and go to state 115
    MORE_OR_EQUAL       shift, and go to state 116
    LOGICAL_EQUALITY    shift, and go to state 117
    LOGICAL_INEQUALITY  shift, and go to state 118
    LOGICAL_AND         shift, and go to state 119
    LOGICAL_OR          shift, and go to state 120
    LOGICAL_MORE        shift, and go to state 121
    LOGICAL_LESS        shift, and go to state 122

    RBRACKET            reduce using rule 19 (equality_expression)
    LESS_OR_EQUAL       [reduce using rule 46 (arithmetic_expression)]
    MORE_OR_EQUAL       [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_EQUALITY    [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_INEQUALITY  [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_AND         [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_OR          [reduce using rule 46 (arithmetic_expression)]
    SEMI_COLON          reduce using rule 19 (equality_expression)
    LOGICAL_MORE        [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_LESS        [reduce using rule 46 (arithmetic_expression)]
    $default            reduce using rule 46 (arithmetic_expression)

    COMPARISON_OPERATOR  go to state 123


State 94

  105 return_statement: RETURN equality_expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 124


State 95

   18 equality_expression: bracketed_const .
   47 arithmetic_expression: bracketed_const .

    RBRACKET    reduce using rule 18 (equality_expression)
    SEMI_COLON  reduce using rule 18 (equality_expression)
    $default    reduce using rule 47 (arithmetic_expression)


State 96

   21 equality_expression: arithmetic_expression . COMPARISON_OPERATOR arithmetic_expression
   48 arithmetic_expression: arithmetic_expression . ARITHMETIC_OPERATOR arithmetic_expression

    LSHIFT              shift, and go to state 50
    RSHIFT              shift, and go to state 51
    LESS_OR_EQUAL       shift, and go to state 115
    MORE_OR_EQUAL       shift, and go to state 116
    LOGICAL_EQUALITY    shift, and go to state 117
    LOGICAL_INEQUALITY  shift, and go to state 118
    LOGICAL_AND         shift, and go to state 119
    LOGICAL_OR          shift, and go to state 120
    BITWISE_OR          shift, and go to state 52
    BITWISE_AND         shift, and go to state 53
    BITWISE_XOR         shift, and go to state 54
    MULT                shift, and go to state 55
    PLUS                shift, and go to state 56
    MINUS               shift, and go to state 57
    DIV                 shift, and go to state 58
    PERCENT             shift, and go to state 59
    LOGICAL_MORE        shift, and go to state 121
    LOGICAL_LESS        shift, and go to state 122

    COMPARISON_OPERATOR  go to state 125
    ARITHMETIC_OPERATOR  go to state 60


State 97

   71 for_loop: FOR LBRACKET . for_loop_decl_statement RBRACKET compound_statement
   72         | FOR LBRACKET . for_loop_decl_statement RBRACKET statement

    LBRACKET    shift, and go to state 5
    SEMI_COLON  shift, and go to state 126
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier        go to state 76
    assignment_expression_list  go to state 127
    assignment_expression       go to state 128
    for_loop_decl_statement     go to state 129


State 98

   69 do_while_loop: DO compound_statement . WHILE LBRACKET expression RBRACKET SEMI_COLON

    WHILE  shift, and go to state 130


State 99

   70 do_while_loop: DO statement . WHILE LBRACKET expression RBRACKET SEMI_COLON

    WHILE  shift, and go to state 131


State 100

   87 if_statement: IF LBRACKET . equality_expression RBRACKET compound_statement
   88             | IF LBRACKET . equality_expression RBRACKET statement

    LBRACKET        shift, and go to state 90
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 93
    equality_expression    go to state 132
    bracketed_const        go to state 95
    arithmetic_expression  go to state 96


State 101

   81 while_loop: WHILE LBRACKET . equality_expression RBRACKET compound_statement
   82           | WHILE LBRACKET . equality_expression RBRACKET statement

    LBRACKET        shift, and go to state 90
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 93
    equality_expression    go to state 133
    bracketed_const        go to state 95
    arithmetic_expression  go to state 96


State 102

  103 semi_colon_statement: assignment_expression SEMI_COLON .

    $default  reduce using rule 103 (semi_colon_statement)


State 103

   89 else_statement: ELSE . compound_statement
   90               | ELSE . statement

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    LCURLY      shift, and go to state 61
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    compound_statement     go to state 134
    statement              go to state 135
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 104

   84 if_block_statement: if_statement else_statement_list .
   86 else_statement_list: else_statement_list . else_statement

    ELSE  shift, and go to state 103

    ELSE      [reduce using rule 84 (if_block_statement)]
    $default  reduce using rule 84 (if_block_statement)

    else_statement  go to state 136


State 105

   85 else_statement_list: else_statement .

    $default  reduce using rule 85 (else_statement_list)


State 106

   93 compound_statement: LCURLY declaration_list RCURLY .

    $default  reduce using rule 93 (compound_statement)


State 107

   96 declaration_list: declaration_list declaration .

    $default  reduce using rule 96 (declaration_list)


State 108

   91 compound_statement: LCURLY declaration_list statement_list . RCURLY
   98 statement_list: statement_list . statement

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    RCURLY      shift, and go to state 137
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    statement              go to state 110
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 109

   92 compound_statement: LCURLY statement_list RCURLY .

    $default  reduce using rule 92 (compound_statement)


State 110

   98 statement_list: statement_list statement .

    $default  reduce using rule 98 (statement_list)


State 111

   14 bracketed_identifier: LBRACKET bracketed_identifier . RBRACKET
   17 equality_expression: bracketed_identifier . COMPARISON_OPERATOR bracketed_identifier
   19                    | bracketed_identifier .
   46 arithmetic_expression: bracketed_identifier .

    RBRACKET            shift, and go to state 30
    LESS_OR_EQUAL       shift, and go to state 115
    MORE_OR_EQUAL       shift, and go to state 116
    LOGICAL_EQUALITY    shift, and go to state 117
    LOGICAL_INEQUALITY  shift, and go to state 118
    LOGICAL_AND         shift, and go to state 119
    LOGICAL_OR          shift, and go to state 120
    LOGICAL_MORE        shift, and go to state 121
    LOGICAL_LESS        shift, and go to state 122

    RBRACKET            [reduce using rule 19 (equality_expression)]
    RBRACKET            [reduce using rule 46 (arithmetic_expression)]
    LESS_OR_EQUAL       [reduce using rule 46 (arithmetic_expression)]
    MORE_OR_EQUAL       [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_EQUALITY    [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_INEQUALITY  [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_AND         [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_OR          [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_MORE        [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_LESS        [reduce using rule 46 (arithmetic_expression)]
    $default            reduce using rule 46 (arithmetic_expression)

    COMPARISON_OPERATOR  go to state 123


State 112

   22 equality_expression: LBRACKET equality_expression . RBRACKET

    RBRACKET  shift, and go to state 138


State 113

   18 equality_expression: bracketed_const .
   24 bracketed_const: LBRACKET bracketed_const . RBRACKET
   47 arithmetic_expression: bracketed_const .

    RBRACKET  shift, and go to state 64

    RBRACKET  [reduce using rule 18 (equality_expression)]
    RBRACKET  [reduce using rule 47 (arithmetic_expression)]
    $default  reduce using rule 47 (arithmetic_expression)


State 114

   21 equality_expression: arithmetic_expression . COMPARISON_OPERATOR arithmetic_expression
   48 arithmetic_expression: arithmetic_expression . ARITHMETIC_OPERATOR arithmetic_expression
   49                      | LBRACKET arithmetic_expression . RBRACKET

    RBRACKET            shift, and go to state 65
    LSHIFT              shift, and go to state 50
    RSHIFT              shift, and go to state 51
    LESS_OR_EQUAL       shift, and go to state 115
    MORE_OR_EQUAL       shift, and go to state 116
    LOGICAL_EQUALITY    shift, and go to state 117
    LOGICAL_INEQUALITY  shift, and go to state 118
    LOGICAL_AND         shift, and go to state 119
    LOGICAL_OR          shift, and go to state 120
    BITWISE_OR          shift, and go to state 52
    BITWISE_AND         shift, and go to state 53
    BITWISE_XOR         shift, and go to state 54
    MULT                shift, and go to state 55
    PLUS                shift, and go to state 56
    MINUS               shift, and go to state 57
    DIV                 shift, and go to state 58
    PERCENT             shift, and go to state 59
    LOGICAL_MORE        shift, and go to state 121
    LOGICAL_LESS        shift, and go to state 122

    COMPARISON_OPERATOR  go to state 125
    ARITHMETIC_OPERATOR  go to state 60


State 115

   31 COMPARISON_OPERATOR: LESS_OR_EQUAL .

    $default  reduce using rule 31 (COMPARISON_OPERATOR)


State 116

   32 COMPARISON_OPERATOR: MORE_OR_EQUAL .

    $default  reduce using rule 32 (COMPARISON_OPERATOR)


State 117

   25 COMPARISON_OPERATOR: LOGICAL_EQUALITY .

    $default  reduce using rule 25 (COMPARISON_OPERATOR)


State 118

   26 COMPARISON_OPERATOR: LOGICAL_INEQUALITY .

    $default  reduce using rule 26 (COMPARISON_OPERATOR)


State 119

   27 COMPARISON_OPERATOR: LOGICAL_AND .

    $default  reduce using rule 27 (COMPARISON_OPERATOR)


State 120

   28 COMPARISON_OPERATOR: LOGICAL_OR .

    $default  reduce using rule 28 (COMPARISON_OPERATOR)


State 121

   29 COMPARISON_OPERATOR: LOGICAL_MORE .

    $default  reduce using rule 29 (COMPARISON_OPERATOR)


State 122

   30 COMPARISON_OPERATOR: LOGICAL_LESS .

    $default  reduce using rule 30 (COMPARISON_OPERATOR)


State 123

   17 equality_expression: bracketed_identifier COMPARISON_OPERATOR . bracketed_identifier

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier  go to state 139


State 124

  105 return_statement: RETURN equality_expression SEMI_COLON .

    $default  reduce using rule 105 (return_statement)


State 125

   21 equality_expression: arithmetic_expression COMPARISON_OPERATOR . arithmetic_expression

    LBRACKET        shift, and go to state 35
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 39

    CONSTANT               go to state 40
    bracketed_identifier   go to state 41
    bracketed_const        go to state 42
    arithmetic_expression  go to state 140


State 126

   76 for_loop_decl_statement: SEMI_COLON . equality_expression SEMI_COLON assignment_expression_list
   78                        | SEMI_COLON . SEMI_COLON assignment_expression_list
   79                        | SEMI_COLON . equality_expression SEMI_COLON
   80                        | SEMI_COLON . SEMI_COLON

    LBRACKET        shift, and go to state 90
    SEMI_COLON      shift, and go to state 141
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 93
    equality_expression    go to state 142
    bracketed_const        go to state 95
    arithmetic_expression  go to state 96


State 127

   16 assignment_expression_list: assignment_expression_list . COMMA assignment_expression
   73 for_loop_decl_statement: assignment_expression_list . SEMI_COLON equality_expression SEMI_COLON assignment_expression_list
   74                        | assignment_expression_list . SEMI_COLON equality_expression SEMI_COLON
   75                        | assignment_expression_list . SEMI_COLON SEMI_COLON assignment_expression_list
   77                        | assignment_expression_list . SEMI_COLON SEMI_COLON

    COMMA       shift, and go to state 143
    SEMI_COLON  shift, and go to state 144


State 128

   15 assignment_expression_list: assignment_expression .

    $default  reduce using rule 15 (assignment_expression_list)


State 129

   71 for_loop: FOR LBRACKET for_loop_decl_statement . RBRACKET compound_statement
   72         | FOR LBRACKET for_loop_decl_statement . RBRACKET statement

    RBRACKET  shift, and go to state 145


State 130

   69 do_while_loop: DO compound_statement WHILE . LBRACKET expression RBRACKET SEMI_COLON

    LBRACKET  shift, and go to state 146


State 131

   70 do_while_loop: DO statement WHILE . LBRACKET expression RBRACKET SEMI_COLON

    LBRACKET  shift, and go to state 147


State 132

   87 if_statement: IF LBRACKET equality_expression . RBRACKET compound_statement
   88             | IF LBRACKET equality_expression . RBRACKET statement

    RBRACKET  shift, and go to state 148


State 133

   81 while_loop: WHILE LBRACKET equality_expression . RBRACKET compound_statement
   82           | WHILE LBRACKET equality_expression . RBRACKET statement

    RBRACKET  shift, and go to state 149


State 134

   89 else_statement: ELSE compound_statement .

    $default  reduce using rule 89 (else_statement)


State 135

   90 else_statement: ELSE statement .

    $default  reduce using rule 90 (else_statement)


State 136

   86 else_statement_list: else_statement_list else_statement .

    $default  reduce using rule 86 (else_statement_list)


State 137

   91 compound_statement: LCURLY declaration_list statement_list RCURLY .

    $default  reduce using rule 91 (compound_statement)


State 138

   22 equality_expression: LBRACKET equality_expression RBRACKET .

    $default  reduce using rule 22 (equality_expression)


State 139

   17 equality_expression: bracketed_identifier COMPARISON_OPERATOR bracketed_identifier .

    $default  reduce using rule 17 (equality_expression)


State 140

   21 equality_expression: arithmetic_expression COMPARISON_OPERATOR arithmetic_expression .
   48 arithmetic_expression: arithmetic_expression . ARITHMETIC_OPERATOR arithmetic_expression

    LSHIFT       shift, and go to state 50
    RSHIFT       shift, and go to state 51
    BITWISE_OR   shift, and go to state 52
    BITWISE_AND  shift, and go to state 53
    BITWISE_XOR  shift, and go to state 54
    MULT         shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    DIV          shift, and go to state 58
    PERCENT      shift, and go to state 59

    $default  reduce using rule 21 (equality_expression)

    ARITHMETIC_OPERATOR  go to state 60


State 141

   78 for_loop_decl_statement: SEMI_COLON SEMI_COLON . assignment_expression_list
   80                        | SEMI_COLON SEMI_COLON .

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 80 (for_loop_decl_statement)

    bracketed_identifier        go to state 76
    assignment_expression_list  go to state 150
    assignment_expression       go to state 128


State 142

   76 for_loop_decl_statement: SEMI_COLON equality_expression . SEMI_COLON assignment_expression_list
   79                        | SEMI_COLON equality_expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 151


State 143

   16 assignment_expression_list: assignment_expression_list COMMA . assignment_expression

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 152


State 144

   73 for_loop_decl_statement: assignment_expression_list SEMI_COLON . equality_expression SEMI_COLON assignment_expression_list
   74                        | assignment_expression_list SEMI_COLON . equality_expression SEMI_COLON
   75                        | assignment_expression_list SEMI_COLON . SEMI_COLON assignment_expression_list
   77                        | assignment_expression_list SEMI_COLON . SEMI_COLON

    LBRACKET        shift, and go to state 90
    SEMI_COLON      shift, and go to state 153
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 93
    equality_expression    go to state 154
    bracketed_const        go to state 95
    arithmetic_expression  go to state 96


State 145

   71 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET . compound_statement
   72         | FOR LBRACKET for_loop_decl_statement RBRACKET . statement

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    LCURLY      shift, and go to state 61
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    compound_statement     go to state 155
    statement              go to state 156
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 146

   69 do_while_loop: DO compound_statement WHILE LBRACKET . expression RBRACKET SEMI_COLON

    LBRACKET        shift, and go to state 90
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 157
    equality_expression    go to state 158
    bracketed_const        go to state 95
    assignment_expression  go to state 159
    arithmetic_expression  go to state 96
    expression             go to state 160


State 147

   70 do_while_loop: DO statement WHILE LBRACKET . expression RBRACKET SEMI_COLON

    LBRACKET        shift, and go to state 90
    FLOATING_CONST  shift, and go to state 36
    INTEGER_CONST   shift, and go to state 37
    CHAR_CONST      shift, and go to state 38
    IDENTIFIER      shift, and go to state 92

    CONSTANT               go to state 40
    bracketed_identifier   go to state 157
    equality_expression    go to state 158
    bracketed_const        go to state 95
    assignment_expression  go to state 159
    arithmetic_expression  go to state 96
    expression             go to state 161


State 148

   87 if_statement: IF LBRACKET equality_expression RBRACKET . compound_statement
   88             | IF LBRACKET equality_expression RBRACKET . statement

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    LCURLY      shift, and go to state 61
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    compound_statement     go to state 162
    statement              go to state 163
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 149

   81 while_loop: WHILE LBRACKET equality_expression RBRACKET . compound_statement
   82           | WHILE LBRACKET equality_expression RBRACKET . statement

    RETURN      shift, and go to state 68
    FOR         shift, and go to state 69
    DO          shift, and go to state 70
    IF          shift, and go to state 71
    WHILE       shift, and go to state 72
    LBRACKET    shift, and go to state 5
    LCURLY      shift, and go to state 61
    SEMI_COLON  shift, and go to state 74
    IDENTIFIER  shift, and go to state 13

    bracketed_identifier   go to state 76
    assignment_expression  go to state 77
    loop                   go to state 78
    do_while_loop          go to state 79
    for_loop               go to state 80
    while_loop             go to state 81
    if_block_statement     go to state 82
    if_statement           go to state 83
    compound_statement     go to state 164
    statement              go to state 165
    semi_colon_statement   go to state 87
    return_statement       go to state 88


State 150

   16 assignment_expression_list: assignment_expression_list . COMMA assignment_expression
   78 for_loop_decl_statement: SEMI_COLON SEMI_COLON assignment_expression_list .

    COMMA  shift, and go to state 143

    $default  reduce using rule 78 (for_loop_decl_statement)


State 151

   76 for_loop_decl_statement: SEMI_COLON equality_expression SEMI_COLON . assignment_expression_list
   79                        | SEMI_COLON equality_expression SEMI_COLON .

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 79 (for_loop_decl_statement)

    bracketed_identifier        go to state 76
    assignment_expression_list  go to state 166
    assignment_expression       go to state 128


State 152

   16 assignment_expression_list: assignment_expression_list COMMA assignment_expression .

    $default  reduce using rule 16 (assignment_expression_list)


State 153

   75 for_loop_decl_statement: assignment_expression_list SEMI_COLON SEMI_COLON . assignment_expression_list
   77                        | assignment_expression_list SEMI_COLON SEMI_COLON .

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 77 (for_loop_decl_statement)

    bracketed_identifier        go to state 76
    assignment_expression_list  go to state 167
    assignment_expression       go to state 128


State 154

   73 for_loop_decl_statement: assignment_expression_list SEMI_COLON equality_expression . SEMI_COLON assignment_expression_list
   74                        | assignment_expression_list SEMI_COLON equality_expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 168


State 155

   71 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET compound_statement .

    $default  reduce using rule 71 (for_loop)


State 156

   72 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET statement .

    $default  reduce using rule 72 (for_loop)


State 157

   17 equality_expression: bracketed_identifier . COMPARISON_OPERATOR bracketed_identifier
   19                    | bracketed_identifier .
   33 assignment_expression: bracketed_identifier . ASSIGNMENT_OPERATOR arithmetic_expression
   46 arithmetic_expression: bracketed_identifier .

    LESS_OR_EQUAL       shift, and go to state 115
    MORE_OR_EQUAL       shift, and go to state 116
    LOGICAL_EQUALITY    shift, and go to state 117
    LOGICAL_INEQUALITY  shift, and go to state 118
    LOGICAL_AND         shift, and go to state 119
    LOGICAL_OR          shift, and go to state 120
    MULT_EQUALS         shift, and go to state 18
    DIV_EQUALS          shift, and go to state 19
    PERCENT_EQUALS      shift, and go to state 20
    PLUS_EQUALS         shift, and go to state 21
    MINUS_EQUALS        shift, and go to state 22
    LSHIFT_EQUALS       shift, and go to state 23
    RSHIFT_EQUALS       shift, and go to state 24
    AND_EQUALS          shift, and go to state 25
    XOR_EQUALS          shift, and go to state 26
    OR_EQUALS           shift, and go to state 27
    EQUALS              shift, and go to state 28
    LOGICAL_MORE        shift, and go to state 121
    LOGICAL_LESS        shift, and go to state 122

    RBRACKET            reduce using rule 19 (equality_expression)
    LESS_OR_EQUAL       [reduce using rule 46 (arithmetic_expression)]
    MORE_OR_EQUAL       [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_EQUALITY    [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_INEQUALITY  [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_AND         [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_OR          [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_MORE        [reduce using rule 46 (arithmetic_expression)]
    LOGICAL_LESS        [reduce using rule 46 (arithmetic_expression)]
    $default            reduce using rule 46 (arithmetic_expression)

    COMPARISON_OPERATOR  go to state 123
    ASSIGNMENT_OPERATOR  go to state 29


State 158

   60 expression: equality_expression .

    $default  reduce using rule 60 (expression)


State 159

   61 expression: assignment_expression .

    $default  reduce using rule 61 (expression)


State 160

   69 do_while_loop: DO compound_statement WHILE LBRACKET expression . RBRACKET SEMI_COLON

    RBRACKET  shift, and go to state 169


State 161

   70 do_while_loop: DO statement WHILE LBRACKET expression . RBRACKET SEMI_COLON

    RBRACKET  shift, and go to state 170


State 162

   87 if_statement: IF LBRACKET equality_expression RBRACKET compound_statement .

    $default  reduce using rule 87 (if_statement)


State 163

   88 if_statement: IF LBRACKET equality_expression RBRACKET statement .

    $default  reduce using rule 88 (if_statement)


State 164

   81 while_loop: WHILE LBRACKET equality_expression RBRACKET compound_statement .

    $default  reduce using rule 81 (while_loop)


State 165

   82 while_loop: WHILE LBRACKET equality_expression RBRACKET statement .

    $default  reduce using rule 82 (while_loop)


State 166

   16 assignment_expression_list: assignment_expression_list . COMMA assignment_expression
   76 for_loop_decl_statement: SEMI_COLON equality_expression SEMI_COLON assignment_expression_list .

    COMMA  shift, and go to state 143

    $default  reduce using rule 76 (for_loop_decl_statement)


State 167

   16 assignment_expression_list: assignment_expression_list . COMMA assignment_expression
   75 for_loop_decl_statement: assignment_expression_list SEMI_COLON SEMI_COLON assignment_expression_list .

    COMMA  shift, and go to state 143

    $default  reduce using rule 75 (for_loop_decl_statement)


State 168

   73 for_loop_decl_statement: assignment_expression_list SEMI_COLON equality_expression SEMI_COLON . assignment_expression_list
   74                        | assignment_expression_list SEMI_COLON equality_expression SEMI_COLON .

    LBRACKET    shift, and go to state 5
    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 74 (for_loop_decl_statement)

    bracketed_identifier        go to state 76
    assignment_expression_list  go to state 171
    assignment_expression       go to state 128


State 169

   69 do_while_loop: DO compound_statement WHILE LBRACKET expression RBRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 172


State 170

   70 do_while_loop: DO statement WHILE LBRACKET expression RBRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 173


State 171

   16 assignment_expression_list: assignment_expression_list . COMMA assignment_expression
   73 for_loop_decl_statement: assignment_expression_list SEMI_COLON equality_expression SEMI_COLON assignment_expression_list .

    COMMA  shift, and go to state 143

    $default  reduce using rule 73 (for_loop_decl_statement)


State 172

   69 do_while_loop: DO compound_statement WHILE LBRACKET expression RBRACKET SEMI_COLON .

    $default  reduce using rule 69 (do_while_loop)


State 173

   70 do_while_loop: DO statement WHILE LBRACKET expression RBRACKET SEMI_COLON .

    $default  reduce using rule 70 (do_while_loop)
