Terminals unused in grammar

   AUTO
   STRUCT
   BREAK
   LONG
   SWITCH
   CASE
   ENUM
   REGISTER
   TYPEDEF
   EXTERN
   UNION
   CONST
   FLOAT
   SHORT
   UNSIGNED
   CONTINUE
   SIGNED
   VOID
   DEFAULT
   GOTO
   VOLATILE
   STATIC
   THREE_DOTS
   HASH
   HASH_HASH


State 41 conflicts: 1 reduce/reduce
State 174 conflicts: 1 shift/reduce
State 194 conflicts: 1 shift/reduce
State 201 conflicts: 1 shift/reduce
State 219 conflicts: 24 reduce/reduce
State 235 conflicts: 24 reduce/reduce
State 239 conflicts: 24 reduce/reduce
State 241 conflicts: 24 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: fn_declaration
    2        | declaration
    3        | fn_prototype
    4        | program fn_declaration
    5        | program declaration
    6        | program fn_prototype

    7 CONSTANT: FLOATING_CONST
    8         | INTEGER_CONST
    9         | CHAR_CONST

   10 type_name: INT
   11          | DOUBLE
   12          | CHAR

   13 declaration: INT init_declarator_list SEMI_COLON
   14            | INT SEMI_COLON

   15 init_declarator_list: init_declarator
   16                     | init_declarator_list COMMA init_declarator

   17 init_declarator: declarator
   18                | declarator EQUALS initializer

   19 declarator: direct_declarator

   20 direct_declarator: IDENTIFIER
   21                  | LBRACKET declarator RBRACKET

   22 initializer: assignment_expression
   23            | LCURLY initializer_list RCURLY
   24            | LCURLY initializer_list COMMA RCURLY

   25 initializer_list: initializer
   26                 | initializer_list COMMA initializer

   27 primary_expression: IDENTIFIER
   28                   | CONSTANT
   29                   | STRING_LITERAL
   30                   | LBRACKET expression RBRACKET

   31 postfix_expression: primary_expression
   32                   | postfix_expression LSQUARE expression RSQUARE
   33                   | bracketed_identifier LBRACKET argument_expression_list RBRACKET
   34                   | bracketed_identifier LBRACKET RBRACKET
   35                   | postfix_expression DOT IDENTIFIER
   36                   | postfix_expression PTR_OP IDENTIFIER
   37                   | postfix_expression PLUS_PLUS
   38                   | postfix_expression MINUS_MINUS

   39 argument_expression_list: expression
   40                         | argument_expression_list COMMA expression

   41 unary_expression: postfix_expression
   42                 | PLUS_PLUS unary_expression
   43                 | MINUS_MINUS unary_expression
   44                 | UNARY_OPERATOR cast_expression
   45                 | SIZEOF unary_expression
   46                 | SIZEOF LBRACKET INT RBRACKET

   47 UNARY_OPERATOR: BITWISE_AND
   48               | MULT
   49               | PLUS
   50               | MINUS
   51               | WAVE
   52               | EXL_MARK

   53 cast_expression: unary_expression
   54                | LBRACKET type_name RBRACKET cast_expression

   55 multiplicative_expression: cast_expression
   56                          | multiplicative_expression MULT cast_expression
   57                          | multiplicative_expression DIV cast_expression
   58                          | multiplicative_expression PERCENT cast_expression

   59 additive_expression: multiplicative_expression
   60                    | additive_expression PLUS multiplicative_expression
   61                    | additive_expression MINUS multiplicative_expression

   62 shift_expression: additive_expression
   63                 | shift_expression LSHIFT additive_expression
   64                 | shift_expression RSHIFT additive_expression

   65 relational_expression: shift_expression
   66                      | relational_expression LOGICAL_LESS shift_expression
   67                      | relational_expression LOGICAL_MORE shift_expression
   68                      | relational_expression LESS_OR_EQUAL shift_expression
   69                      | relational_expression MORE_OR_EQUAL shift_expression

   70 equality_expression: relational_expression
   71                    | equality_expression LOGICAL_EQUALITY relational_expression
   72                    | equality_expression LOGICAL_INEQUALITY relational_expression

   73 and_expression: equality_expression
   74               | and_expression BITWISE_AND equality_expression

   75 exclusive_or_expression: and_expression
   76                        | exclusive_or_expression BITWISE_XOR and_expression

   77 inclusive_or_expression: exclusive_or_expression
   78                        | inclusive_or_expression BITWISE_OR exclusive_or_expression

   79 logical_and_expression: inclusive_or_expression
   80                       | logical_and_expression LOGICAL_AND inclusive_or_expression

   81 logical_or_expression: logical_and_expression
   82                      | logical_or_expression LOGICAL_OR logical_and_expression

   83 conditional_expression: logical_or_expression
   84                       | logical_or_expression Q_MARK expression COLON conditional_expression

   85 assignment_expression: conditional_expression
   86                      | unary_expression ASSIGNMENT_OPERATOR assignment_expression

   87 ASSIGNMENT_OPERATOR: EQUALS
   88                    | MULT_EQUALS
   89                    | DIV_EQUALS
   90                    | PERCENT_EQUALS
   91                    | PLUS_EQUALS
   92                    | MINUS_EQUALS
   93                    | LSHIFT_EQUALS
   94                    | RSHIFT_EQUALS
   95                    | AND_EQUALS
   96                    | XOR_EQUALS
   97                    | OR_EQUALS

   98 expression: assignment_expression

   99 expression_list: expression
  100                | expression_list COMMA expression

  101 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON

  102 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

  103 fn_params_list: INT bracketed_identifier
  104               | fn_params_list COMMA INT bracketed_identifier
  105               | %empty

  106 bracketed_identifier: IDENTIFIER
  107                     | LBRACKET bracketed_identifier RBRACKET

  108 loop: for_loop
  109     | while_loop
  110     | do_while_loop

  111 do_while_loop: DO compound_statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON
  112              | DO statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON

  113 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET compound_statement
  114         | FOR LBRACKET for_loop_decl_statement RBRACKET statement

  115 for_loop_decl_statement: expression_list SEMI_COLON expression_list SEMI_COLON expression_list
  116                        | expression_list SEMI_COLON expression_list SEMI_COLON
  117                        | expression_list SEMI_COLON SEMI_COLON expression_list
  118                        | SEMI_COLON expression_list SEMI_COLON expression_list
  119                        | expression_list SEMI_COLON SEMI_COLON
  120                        | SEMI_COLON SEMI_COLON expression_list
  121                        | SEMI_COLON expression_list SEMI_COLON
  122                        | SEMI_COLON SEMI_COLON

  123 while_loop: WHILE LBRACKET expression_list RBRACKET compound_statement
  124           | WHILE LBRACKET expression_list RBRACKET statement

  125 if_block_statement: if_statement
  126                   | if_statement else_statement_list

  127 else_statement_list: else_statement
  128                    | else_statement_list else_statement

  129 if_statement: IF LBRACKET expression_list RBRACKET compound_statement
  130             | IF LBRACKET expression_list RBRACKET statement

  131 else_statement: ELSE compound_statement
  132               | ELSE statement

  133 compound_statement: LCURLY declaration_list statement_list RCURLY
  134                   | LCURLY statement_list RCURLY
  135                   | LCURLY declaration_list RCURLY
  136                   | LCURLY RCURLY

  137 declaration_list: declaration
  138                 | declaration_list declaration

  139 statement_list: statement
  140               | statement_list statement

  141 statement: loop
  142          | if_block_statement
  143          | expression_statement
  144          | semi_colon_statement
  145          | compound_statement

  146 expression_statement: expression_list SEMI_COLON

  147 semi_colon_statement: return_statement
  148                     | SEMI_COLON

  149 return_statement: RETURN expression SEMI_COLON
  150                 | RETURN SEMI_COLON


Terminals, with rules where they appear

$end (0) 0
error (256)
AUTO (258)
DOUBLE (259) 11
INT (260) 10 13 14 46 101 102 103 104
STRUCT (261)
BREAK (262)
ELSE (263) 131 132
LONG (264)
SWITCH (265)
CASE (266)
ENUM (267)
REGISTER (268)
TYPEDEF (269)
CHAR (270) 12
EXTERN (271)
RETURN (272) 149 150
UNION (273)
CONST (274)
FLOAT (275)
SHORT (276)
UNSIGNED (277)
CONTINUE (278)
FOR (279) 113 114
SIGNED (280)
VOID (281)
DEFAULT (282)
GOTO (283)
VOLATILE (284)
DO (285) 111 112
IF (286) 129 130
STATIC (287)
WHILE (288) 111 112 123 124
LSQUARE (289) 32
RSQUARE (290) 32
LBRACKET (291) 21 30 33 34 46 54 101 102 107 111 112 113 114 123 124
    129 130
RBRACKET (292) 21 30 33 34 46 54 101 102 107 111 112 113 114 123 124
    129 130
LCURLY (293) 23 24 133 134 135 136
RCURLY (294) 23 24 133 134 135 136
THREE_DOTS (295)
DOT (296) 35
PTR_OP (297) 36
PLUS_PLUS (298) 37 42
MINUS_MINUS (299) 38 43
SIZEOF (300) 45 46
LSHIFT (301) 63
RSHIFT (302) 64
LESS_OR_EQUAL (303) 68
MORE_OR_EQUAL (304) 69
LOGICAL_EQUALITY (305) 71
LOGICAL_INEQUALITY (306) 72
LOGICAL_AND (307) 80
LOGICAL_OR (308) 82
Q_MARK (309) 84
COLON (310) 84
MULT_EQUALS (311) 88
DIV_EQUALS (312) 89
PERCENT_EQUALS (313) 90
PLUS_EQUALS (314) 91
MINUS_EQUALS (315) 92
LSHIFT_EQUALS (316) 93
RSHIFT_EQUALS (317) 94
AND_EQUALS (318) 95
XOR_EQUALS (319) 96
OR_EQUALS (320) 97
COMMA (321) 16 24 26 40 100 104
HASH (322)
HASH_HASH (323)
SEMI_COLON (324) 13 14 101 111 112 115 116 117 118 119 120 121 122
    146 148 149 150
EQUALS (325) 18 87
BITWISE_OR (326) 78
BITWISE_AND (327) 47 74
BITWISE_XOR (328) 76
MULT (329) 48 56
PLUS (330) 49 60
MINUS (331) 50 61
WAVE (332) 51
EXL_MARK (333) 52
DIV (334) 57
PERCENT (335) 58
LOGICAL_MORE (336) 67
LOGICAL_LESS (337) 66
INTEGER_CONST (338) 8
FLOATING_CONST (339) 7
CHAR_CONST (340) 9
IDENTIFIER (341) 20 27 35 36 101 102 106
STRING_LITERAL (342) 29


Nonterminals, with rules where they appear

$accept (88)
    on left: 0
program (89)
    on left: 1 2 3 4 5 6, on right: 0 4 5 6
CONSTANT (90)
    on left: 7 8 9, on right: 28
type_name (91)
    on left: 10 11 12, on right: 54
declaration (92)
    on left: 13 14, on right: 2 5 137 138
init_declarator_list (93)
    on left: 15 16, on right: 13 16
init_declarator (94)
    on left: 17 18, on right: 15 16
declarator (95)
    on left: 19, on right: 17 18 21
direct_declarator (96)
    on left: 20 21, on right: 19
initializer (97)
    on left: 22 23 24, on right: 18 25 26
initializer_list (98)
    on left: 25 26, on right: 23 24 26
primary_expression (99)
    on left: 27 28 29 30, on right: 31
postfix_expression (100)
    on left: 31 32 33 34 35 36 37 38, on right: 32 35 36 37 38 41
argument_expression_list (101)
    on left: 39 40, on right: 33 40
unary_expression (102)
    on left: 41 42 43 44 45 46, on right: 42 43 45 53 86
UNARY_OPERATOR (103)
    on left: 47 48 49 50 51 52, on right: 44
cast_expression (104)
    on left: 53 54, on right: 44 54 55 56 57 58
multiplicative_expression (105)
    on left: 55 56 57 58, on right: 56 57 58 59 60 61
additive_expression (106)
    on left: 59 60 61, on right: 60 61 62 63 64
shift_expression (107)
    on left: 62 63 64, on right: 63 64 65 66 67 68 69
relational_expression (108)
    on left: 65 66 67 68 69, on right: 66 67 68 69 70 71 72
equality_expression (109)
    on left: 70 71 72, on right: 71 72 73 74
and_expression (110)
    on left: 73 74, on right: 74 75 76
exclusive_or_expression (111)
    on left: 75 76, on right: 76 77 78
inclusive_or_expression (112)
    on left: 77 78, on right: 78 79 80
logical_and_expression (113)
    on left: 79 80, on right: 80 81 82
logical_or_expression (114)
    on left: 81 82, on right: 82 83 84
conditional_expression (115)
    on left: 83 84, on right: 84 85
assignment_expression (116)
    on left: 85 86, on right: 22 86 98
ASSIGNMENT_OPERATOR (117)
    on left: 87 88 89 90 91 92 93 94 95 96 97, on right: 86
expression (118)
    on left: 98, on right: 30 32 39 40 84 99 100 149
expression_list (119)
    on left: 99 100, on right: 100 111 112 115 116 117 118 119 120
    121 123 124 129 130 146
fn_prototype (120)
    on left: 101, on right: 3 6
fn_declaration (121)
    on left: 102, on right: 1 4
fn_params_list (122)
    on left: 103 104 105, on right: 101 102 104
bracketed_identifier (123)
    on left: 106 107, on right: 33 34 103 104 107
loop (124)
    on left: 108 109 110, on right: 141
do_while_loop (125)
    on left: 111 112, on right: 110
for_loop (126)
    on left: 113 114, on right: 108
for_loop_decl_statement (127)
    on left: 115 116 117 118 119 120 121 122, on right: 113 114
while_loop (128)
    on left: 123 124, on right: 109
if_block_statement (129)
    on left: 125 126, on right: 142
else_statement_list (130)
    on left: 127 128, on right: 126 128
if_statement (131)
    on left: 129 130, on right: 125 126
else_statement (132)
    on left: 131 132, on right: 127 128
compound_statement (133)
    on left: 133 134 135 136, on right: 102 111 113 123 129 131 145
declaration_list (134)
    on left: 137 138, on right: 133 135 138
statement_list (135)
    on left: 139 140, on right: 133 134 140
statement (136)
    on left: 141 142 143 144 145, on right: 112 114 124 130 132 139
    140
expression_statement (137)
    on left: 146, on right: 143
semi_colon_statement (138)
    on left: 147 148, on right: 144
return_statement (139)
    on left: 149 150, on right: 147


State 0

    0 $accept: . program $end

    INT  shift, and go to state 1

    program         go to state 2
    declaration     go to state 3
    fn_prototype    go to state 4
    fn_declaration  go to state 5


State 1

   13 declaration: INT . init_declarator_list SEMI_COLON
   14            | INT . SEMI_COLON
  101 fn_prototype: INT . IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON
  102 fn_declaration: INT . IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET    shift, and go to state 6
    SEMI_COLON  shift, and go to state 7
    IDENTIFIER  shift, and go to state 8

    init_declarator_list  go to state 9
    init_declarator       go to state 10
    declarator            go to state 11
    direct_declarator     go to state 12


State 2

    0 $accept: program . $end
    4 program: program . fn_declaration
    5        | program . declaration
    6        | program . fn_prototype

    $end  shift, and go to state 13
    INT   shift, and go to state 1

    declaration     go to state 14
    fn_prototype    go to state 15
    fn_declaration  go to state 16


State 3

    2 program: declaration .

    $default  reduce using rule 2 (program)


State 4

    3 program: fn_prototype .

    $default  reduce using rule 3 (program)


State 5

    1 program: fn_declaration .

    $default  reduce using rule 1 (program)


State 6

   21 direct_declarator: LBRACKET . declarator RBRACKET

    LBRACKET    shift, and go to state 6
    IDENTIFIER  shift, and go to state 17

    declarator         go to state 18
    direct_declarator  go to state 12


State 7

   14 declaration: INT SEMI_COLON .

    $default  reduce using rule 14 (declaration)


State 8

   20 direct_declarator: IDENTIFIER .
  101 fn_prototype: INT IDENTIFIER . LBRACKET fn_params_list RBRACKET SEMI_COLON
  102 fn_declaration: INT IDENTIFIER . LBRACKET fn_params_list RBRACKET compound_statement

    LBRACKET  shift, and go to state 19

    $default  reduce using rule 20 (direct_declarator)


State 9

   13 declaration: INT init_declarator_list . SEMI_COLON
   16 init_declarator_list: init_declarator_list . COMMA init_declarator

    COMMA       shift, and go to state 20
    SEMI_COLON  shift, and go to state 21


State 10

   15 init_declarator_list: init_declarator .

    $default  reduce using rule 15 (init_declarator_list)


State 11

   17 init_declarator: declarator .
   18                | declarator . EQUALS initializer

    EQUALS  shift, and go to state 22

    $default  reduce using rule 17 (init_declarator)


State 12

   19 declarator: direct_declarator .

    $default  reduce using rule 19 (declarator)


State 13

    0 $accept: program $end .

    $default  accept


State 14

    5 program: program declaration .

    $default  reduce using rule 5 (program)


State 15

    6 program: program fn_prototype .

    $default  reduce using rule 6 (program)


State 16

    4 program: program fn_declaration .

    $default  reduce using rule 4 (program)


State 17

   20 direct_declarator: IDENTIFIER .

    $default  reduce using rule 20 (direct_declarator)


State 18

   21 direct_declarator: LBRACKET declarator . RBRACKET

    RBRACKET  shift, and go to state 23


State 19

  101 fn_prototype: INT IDENTIFIER LBRACKET . fn_params_list RBRACKET SEMI_COLON
  102 fn_declaration: INT IDENTIFIER LBRACKET . fn_params_list RBRACKET compound_statement

    INT  shift, and go to state 24

    $default  reduce using rule 105 (fn_params_list)

    fn_params_list  go to state 25


State 20

   16 init_declarator_list: init_declarator_list COMMA . init_declarator

    LBRACKET    shift, and go to state 6
    IDENTIFIER  shift, and go to state 17

    init_declarator    go to state 26
    declarator         go to state 11
    direct_declarator  go to state 12


State 21

   13 declaration: INT init_declarator_list SEMI_COLON .

    $default  reduce using rule 13 (declaration)


State 22

   18 init_declarator: declarator EQUALS . initializer

    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 28
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    initializer                go to state 44
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 61
    bracketed_identifier       go to state 62


State 23

   21 direct_declarator: LBRACKET declarator RBRACKET .

    $default  reduce using rule 21 (direct_declarator)


State 24

  103 fn_params_list: INT . bracketed_identifier

    LBRACKET    shift, and go to state 63
    IDENTIFIER  shift, and go to state 64

    bracketed_identifier  go to state 65


State 25

  101 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list . RBRACKET SEMI_COLON
  102 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list . RBRACKET compound_statement
  104 fn_params_list: fn_params_list . COMMA INT bracketed_identifier

    RBRACKET  shift, and go to state 66
    COMMA     shift, and go to state 67


State 26

   16 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 16 (init_declarator_list)


State 27

   30 primary_expression: LBRACKET . expression RBRACKET
   54 cast_expression: LBRACKET . type_name RBRACKET cast_expression
  107 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    DOUBLE          shift, and go to state 68
    INT             shift, and go to state 69
    CHAR            shift, and go to state 70
    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    type_name                  go to state 71
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 73
    bracketed_identifier       go to state 74


State 28

   23 initializer: LCURLY . initializer_list RCURLY
   24            | LCURLY . initializer_list COMMA RCURLY

    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 28
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    initializer                go to state 75
    initializer_list           go to state 76
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 61
    bracketed_identifier       go to state 62


State 29

   42 unary_expression: PLUS_PLUS . unary_expression

    LBRACKET        shift, and go to state 77
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 78
    UNARY_OPERATOR        go to state 48
    bracketed_identifier  go to state 62


State 30

   43 unary_expression: MINUS_MINUS . unary_expression

    LBRACKET        shift, and go to state 77
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 79
    UNARY_OPERATOR        go to state 48
    bracketed_identifier  go to state 62


State 31

   45 unary_expression: SIZEOF . unary_expression
   46                 | SIZEOF . LBRACKET INT RBRACKET

    LBRACKET        shift, and go to state 80
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 81
    UNARY_OPERATOR        go to state 48
    bracketed_identifier  go to state 62


State 32

   47 UNARY_OPERATOR: BITWISE_AND .

    $default  reduce using rule 47 (UNARY_OPERATOR)


State 33

   48 UNARY_OPERATOR: MULT .

    $default  reduce using rule 48 (UNARY_OPERATOR)


State 34

   49 UNARY_OPERATOR: PLUS .

    $default  reduce using rule 49 (UNARY_OPERATOR)


State 35

   50 UNARY_OPERATOR: MINUS .

    $default  reduce using rule 50 (UNARY_OPERATOR)


State 36

   51 UNARY_OPERATOR: WAVE .

    $default  reduce using rule 51 (UNARY_OPERATOR)


State 37

   52 UNARY_OPERATOR: EXL_MARK .

    $default  reduce using rule 52 (UNARY_OPERATOR)


State 38

    8 CONSTANT: INTEGER_CONST .

    $default  reduce using rule 8 (CONSTANT)


State 39

    7 CONSTANT: FLOATING_CONST .

    $default  reduce using rule 7 (CONSTANT)


State 40

    9 CONSTANT: CHAR_CONST .

    $default  reduce using rule 9 (CONSTANT)


State 41

   27 primary_expression: IDENTIFIER .
  106 bracketed_identifier: IDENTIFIER .

    LBRACKET  reduce using rule 106 (bracketed_identifier)
    RBRACKET  reduce using rule 27 (primary_expression)
    RBRACKET  [reduce using rule 106 (bracketed_identifier)]
    $default  reduce using rule 27 (primary_expression)


State 42

   29 primary_expression: STRING_LITERAL .

    $default  reduce using rule 29 (primary_expression)


State 43

   28 primary_expression: CONSTANT .

    $default  reduce using rule 28 (primary_expression)


State 44

   18 init_declarator: declarator EQUALS initializer .

    $default  reduce using rule 18 (init_declarator)


State 45

   31 postfix_expression: primary_expression .

    $default  reduce using rule 31 (postfix_expression)


State 46

   32 postfix_expression: postfix_expression . LSQUARE expression RSQUARE
   35                   | postfix_expression . DOT IDENTIFIER
   36                   | postfix_expression . PTR_OP IDENTIFIER
   37                   | postfix_expression . PLUS_PLUS
   38                   | postfix_expression . MINUS_MINUS
   41 unary_expression: postfix_expression .

    LSQUARE      shift, and go to state 82
    DOT          shift, and go to state 83
    PTR_OP       shift, and go to state 84
    PLUS_PLUS    shift, and go to state 85
    MINUS_MINUS  shift, and go to state 86

    $default  reduce using rule 41 (unary_expression)


State 47

   53 cast_expression: unary_expression .
   86 assignment_expression: unary_expression . ASSIGNMENT_OPERATOR assignment_expression

    MULT_EQUALS     shift, and go to state 87
    DIV_EQUALS      shift, and go to state 88
    PERCENT_EQUALS  shift, and go to state 89
    PLUS_EQUALS     shift, and go to state 90
    MINUS_EQUALS    shift, and go to state 91
    LSHIFT_EQUALS   shift, and go to state 92
    RSHIFT_EQUALS   shift, and go to state 93
    AND_EQUALS      shift, and go to state 94
    XOR_EQUALS      shift, and go to state 95
    OR_EQUALS       shift, and go to state 96
    EQUALS          shift, and go to state 97

    $default  reduce using rule 53 (cast_expression)

    ASSIGNMENT_OPERATOR  go to state 98


State 48

   44 unary_expression: UNARY_OPERATOR . cast_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 99
    UNARY_OPERATOR        go to state 48
    cast_expression       go to state 100
    bracketed_identifier  go to state 62


State 49

   55 multiplicative_expression: cast_expression .

    $default  reduce using rule 55 (multiplicative_expression)


State 50

   56 multiplicative_expression: multiplicative_expression . MULT cast_expression
   57                          | multiplicative_expression . DIV cast_expression
   58                          | multiplicative_expression . PERCENT cast_expression
   59 additive_expression: multiplicative_expression .

    MULT     shift, and go to state 101
    DIV      shift, and go to state 102
    PERCENT  shift, and go to state 103

    $default  reduce using rule 59 (additive_expression)


State 51

   60 additive_expression: additive_expression . PLUS multiplicative_expression
   61                    | additive_expression . MINUS multiplicative_expression
   62 shift_expression: additive_expression .

    PLUS   shift, and go to state 104
    MINUS  shift, and go to state 105

    $default  reduce using rule 62 (shift_expression)


State 52

   63 shift_expression: shift_expression . LSHIFT additive_expression
   64                 | shift_expression . RSHIFT additive_expression
   65 relational_expression: shift_expression .

    LSHIFT  shift, and go to state 106
    RSHIFT  shift, and go to state 107

    $default  reduce using rule 65 (relational_expression)


State 53

   66 relational_expression: relational_expression . LOGICAL_LESS shift_expression
   67                      | relational_expression . LOGICAL_MORE shift_expression
   68                      | relational_expression . LESS_OR_EQUAL shift_expression
   69                      | relational_expression . MORE_OR_EQUAL shift_expression
   70 equality_expression: relational_expression .

    LESS_OR_EQUAL  shift, and go to state 108
    MORE_OR_EQUAL  shift, and go to state 109
    LOGICAL_MORE   shift, and go to state 110
    LOGICAL_LESS   shift, and go to state 111

    $default  reduce using rule 70 (equality_expression)


State 54

   71 equality_expression: equality_expression . LOGICAL_EQUALITY relational_expression
   72                    | equality_expression . LOGICAL_INEQUALITY relational_expression
   73 and_expression: equality_expression .

    LOGICAL_EQUALITY    shift, and go to state 112
    LOGICAL_INEQUALITY  shift, and go to state 113

    $default  reduce using rule 73 (and_expression)


State 55

   74 and_expression: and_expression . BITWISE_AND equality_expression
   75 exclusive_or_expression: and_expression .

    BITWISE_AND  shift, and go to state 114

    $default  reduce using rule 75 (exclusive_or_expression)


State 56

   76 exclusive_or_expression: exclusive_or_expression . BITWISE_XOR and_expression
   77 inclusive_or_expression: exclusive_or_expression .

    BITWISE_XOR  shift, and go to state 115

    $default  reduce using rule 77 (inclusive_or_expression)


State 57

   78 inclusive_or_expression: inclusive_or_expression . BITWISE_OR exclusive_or_expression
   79 logical_and_expression: inclusive_or_expression .

    BITWISE_OR  shift, and go to state 116

    $default  reduce using rule 79 (logical_and_expression)


State 58

   80 logical_and_expression: logical_and_expression . LOGICAL_AND inclusive_or_expression
   81 logical_or_expression: logical_and_expression .

    LOGICAL_AND  shift, and go to state 117

    $default  reduce using rule 81 (logical_or_expression)


State 59

   82 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression
   83 conditional_expression: logical_or_expression .
   84                       | logical_or_expression . Q_MARK expression COLON conditional_expression

    LOGICAL_OR  shift, and go to state 118
    Q_MARK      shift, and go to state 119

    $default  reduce using rule 83 (conditional_expression)


State 60

   85 assignment_expression: conditional_expression .

    $default  reduce using rule 85 (assignment_expression)


State 61

   22 initializer: assignment_expression .

    $default  reduce using rule 22 (initializer)


State 62

   33 postfix_expression: bracketed_identifier . LBRACKET argument_expression_list RBRACKET
   34                   | bracketed_identifier . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 120


State 63

  107 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    LBRACKET    shift, and go to state 63
    IDENTIFIER  shift, and go to state 64

    bracketed_identifier  go to state 121


State 64

  106 bracketed_identifier: IDENTIFIER .

    $default  reduce using rule 106 (bracketed_identifier)


State 65

  103 fn_params_list: INT bracketed_identifier .

    $default  reduce using rule 103 (fn_params_list)


State 66

  101 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list RBRACKET . SEMI_COLON
  102 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET . compound_statement

    LCURLY      shift, and go to state 122
    SEMI_COLON  shift, and go to state 123

    compound_statement  go to state 124


State 67

  104 fn_params_list: fn_params_list COMMA . INT bracketed_identifier

    INT  shift, and go to state 125


State 68

   11 type_name: DOUBLE .

    $default  reduce using rule 11 (type_name)


State 69

   10 type_name: INT .

    $default  reduce using rule 10 (type_name)


State 70

   12 type_name: CHAR .

    $default  reduce using rule 12 (type_name)


State 71

   54 cast_expression: LBRACKET type_name . RBRACKET cast_expression

    RBRACKET  shift, and go to state 126


State 72

   98 expression: assignment_expression .

    $default  reduce using rule 98 (expression)


State 73

   30 primary_expression: LBRACKET expression . RBRACKET

    RBRACKET  shift, and go to state 127


State 74

   33 postfix_expression: bracketed_identifier . LBRACKET argument_expression_list RBRACKET
   34                   | bracketed_identifier . LBRACKET RBRACKET
  107 bracketed_identifier: LBRACKET bracketed_identifier . RBRACKET

    LBRACKET  shift, and go to state 120
    RBRACKET  shift, and go to state 128


State 75

   25 initializer_list: initializer .

    $default  reduce using rule 25 (initializer_list)


State 76

   23 initializer: LCURLY initializer_list . RCURLY
   24            | LCURLY initializer_list . COMMA RCURLY
   26 initializer_list: initializer_list . COMMA initializer

    RCURLY  shift, and go to state 129
    COMMA   shift, and go to state 130


State 77

   30 primary_expression: LBRACKET . expression RBRACKET
  107 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 73
    bracketed_identifier       go to state 74


State 78

   42 unary_expression: PLUS_PLUS unary_expression .

    $default  reduce using rule 42 (unary_expression)


State 79

   43 unary_expression: MINUS_MINUS unary_expression .

    $default  reduce using rule 43 (unary_expression)


State 80

   30 primary_expression: LBRACKET . expression RBRACKET
   46 unary_expression: SIZEOF LBRACKET . INT RBRACKET
  107 bracketed_identifier: LBRACKET . bracketed_identifier RBRACKET

    INT             shift, and go to state 131
    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 73
    bracketed_identifier       go to state 74


State 81

   45 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 45 (unary_expression)


State 82

   32 postfix_expression: postfix_expression LSQUARE . expression RSQUARE

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 132
    bracketed_identifier       go to state 62


State 83

   35 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 133


State 84

   36 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 134


State 85

   37 postfix_expression: postfix_expression PLUS_PLUS .

    $default  reduce using rule 37 (postfix_expression)


State 86

   38 postfix_expression: postfix_expression MINUS_MINUS .

    $default  reduce using rule 38 (postfix_expression)


State 87

   88 ASSIGNMENT_OPERATOR: MULT_EQUALS .

    $default  reduce using rule 88 (ASSIGNMENT_OPERATOR)


State 88

   89 ASSIGNMENT_OPERATOR: DIV_EQUALS .

    $default  reduce using rule 89 (ASSIGNMENT_OPERATOR)


State 89

   90 ASSIGNMENT_OPERATOR: PERCENT_EQUALS .

    $default  reduce using rule 90 (ASSIGNMENT_OPERATOR)


State 90

   91 ASSIGNMENT_OPERATOR: PLUS_EQUALS .

    $default  reduce using rule 91 (ASSIGNMENT_OPERATOR)


State 91

   92 ASSIGNMENT_OPERATOR: MINUS_EQUALS .

    $default  reduce using rule 92 (ASSIGNMENT_OPERATOR)


State 92

   93 ASSIGNMENT_OPERATOR: LSHIFT_EQUALS .

    $default  reduce using rule 93 (ASSIGNMENT_OPERATOR)


State 93

   94 ASSIGNMENT_OPERATOR: RSHIFT_EQUALS .

    $default  reduce using rule 94 (ASSIGNMENT_OPERATOR)


State 94

   95 ASSIGNMENT_OPERATOR: AND_EQUALS .

    $default  reduce using rule 95 (ASSIGNMENT_OPERATOR)


State 95

   96 ASSIGNMENT_OPERATOR: XOR_EQUALS .

    $default  reduce using rule 96 (ASSIGNMENT_OPERATOR)


State 96

   97 ASSIGNMENT_OPERATOR: OR_EQUALS .

    $default  reduce using rule 97 (ASSIGNMENT_OPERATOR)


State 97

   87 ASSIGNMENT_OPERATOR: EQUALS .

    $default  reduce using rule 87 (ASSIGNMENT_OPERATOR)


State 98

   86 assignment_expression: unary_expression ASSIGNMENT_OPERATOR . assignment_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 135
    bracketed_identifier       go to state 62


State 99

   53 cast_expression: unary_expression .

    $default  reduce using rule 53 (cast_expression)


State 100

   44 unary_expression: UNARY_OPERATOR cast_expression .

    $default  reduce using rule 44 (unary_expression)


State 101

   56 multiplicative_expression: multiplicative_expression MULT . cast_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 99
    UNARY_OPERATOR        go to state 48
    cast_expression       go to state 136
    bracketed_identifier  go to state 62


State 102

   57 multiplicative_expression: multiplicative_expression DIV . cast_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 99
    UNARY_OPERATOR        go to state 48
    cast_expression       go to state 137
    bracketed_identifier  go to state 62


State 103

   58 multiplicative_expression: multiplicative_expression PERCENT . cast_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 99
    UNARY_OPERATOR        go to state 48
    cast_expression       go to state 138
    bracketed_identifier  go to state 62


State 104

   60 additive_expression: additive_expression PLUS . multiplicative_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 139
    bracketed_identifier       go to state 62


State 105

   61 additive_expression: additive_expression MINUS . multiplicative_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 140
    bracketed_identifier       go to state 62


State 106

   63 shift_expression: shift_expression LSHIFT . additive_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 141
    bracketed_identifier       go to state 62


State 107

   64 shift_expression: shift_expression RSHIFT . additive_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 142
    bracketed_identifier       go to state 62


State 108

   68 relational_expression: relational_expression LESS_OR_EQUAL . shift_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 143
    bracketed_identifier       go to state 62


State 109

   69 relational_expression: relational_expression MORE_OR_EQUAL . shift_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 144
    bracketed_identifier       go to state 62


State 110

   67 relational_expression: relational_expression LOGICAL_MORE . shift_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 145
    bracketed_identifier       go to state 62


State 111

   66 relational_expression: relational_expression LOGICAL_LESS . shift_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 146
    bracketed_identifier       go to state 62


State 112

   71 equality_expression: equality_expression LOGICAL_EQUALITY . relational_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 147
    bracketed_identifier       go to state 62


State 113

   72 equality_expression: equality_expression LOGICAL_INEQUALITY . relational_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 148
    bracketed_identifier       go to state 62


State 114

   74 and_expression: and_expression BITWISE_AND . equality_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 149
    bracketed_identifier       go to state 62


State 115

   76 exclusive_or_expression: exclusive_or_expression BITWISE_XOR . and_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 150
    bracketed_identifier       go to state 62


State 116

   78 inclusive_or_expression: inclusive_or_expression BITWISE_OR . exclusive_or_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 151
    bracketed_identifier       go to state 62


State 117

   80 logical_and_expression: logical_and_expression LOGICAL_AND . inclusive_or_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 152
    bracketed_identifier       go to state 62


State 118

   82 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 153
    bracketed_identifier       go to state 62


State 119

   84 conditional_expression: logical_or_expression Q_MARK . expression COLON conditional_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 154
    bracketed_identifier       go to state 62


State 120

   33 postfix_expression: bracketed_identifier LBRACKET . argument_expression_list RBRACKET
   34                   | bracketed_identifier LBRACKET . RBRACKET

    LBRACKET        shift, and go to state 27
    RBRACKET        shift, and go to state 155
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    argument_expression_list   go to state 156
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 157
    bracketed_identifier       go to state 62


State 121

  107 bracketed_identifier: LBRACKET bracketed_identifier . RBRACKET

    RBRACKET  shift, and go to state 128


State 122

  133 compound_statement: LCURLY . declaration_list statement_list RCURLY
  134                   | LCURLY . statement_list RCURLY
  135                   | LCURLY . declaration_list RCURLY
  136                   | LCURLY . RCURLY

    INT             shift, and go to state 158
    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    RCURLY          shift, and go to state 164
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    declaration                go to state 166
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 175
    declaration_list           go to state 176
    statement_list             go to state 177
    statement                  go to state 178
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 123

  101 fn_prototype: INT IDENTIFIER LBRACKET fn_params_list RBRACKET SEMI_COLON .

    $default  reduce using rule 101 (fn_prototype)


State 124

  102 fn_declaration: INT IDENTIFIER LBRACKET fn_params_list RBRACKET compound_statement .

    $default  reduce using rule 102 (fn_declaration)


State 125

  104 fn_params_list: fn_params_list COMMA INT . bracketed_identifier

    LBRACKET    shift, and go to state 63
    IDENTIFIER  shift, and go to state 64

    bracketed_identifier  go to state 182


State 126

   54 cast_expression: LBRACKET type_name RBRACKET . cast_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT              go to state 43
    primary_expression    go to state 45
    postfix_expression    go to state 46
    unary_expression      go to state 99
    UNARY_OPERATOR        go to state 48
    cast_expression       go to state 183
    bracketed_identifier  go to state 62


State 127

   30 primary_expression: LBRACKET expression RBRACKET .

    $default  reduce using rule 30 (primary_expression)


State 128

  107 bracketed_identifier: LBRACKET bracketed_identifier RBRACKET .

    $default  reduce using rule 107 (bracketed_identifier)


State 129

   23 initializer: LCURLY initializer_list RCURLY .

    $default  reduce using rule 23 (initializer)


State 130

   24 initializer: LCURLY initializer_list COMMA . RCURLY
   26 initializer_list: initializer_list COMMA . initializer

    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 28
    RCURLY          shift, and go to state 184
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    initializer                go to state 185
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 61
    bracketed_identifier       go to state 62


State 131

   46 unary_expression: SIZEOF LBRACKET INT . RBRACKET

    RBRACKET  shift, and go to state 186


State 132

   32 postfix_expression: postfix_expression LSQUARE expression . RSQUARE

    RSQUARE  shift, and go to state 187


State 133

   35 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 35 (postfix_expression)


State 134

   36 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 36 (postfix_expression)


State 135

   86 assignment_expression: unary_expression ASSIGNMENT_OPERATOR assignment_expression .

    $default  reduce using rule 86 (assignment_expression)


State 136

   56 multiplicative_expression: multiplicative_expression MULT cast_expression .

    $default  reduce using rule 56 (multiplicative_expression)


State 137

   57 multiplicative_expression: multiplicative_expression DIV cast_expression .

    $default  reduce using rule 57 (multiplicative_expression)


State 138

   58 multiplicative_expression: multiplicative_expression PERCENT cast_expression .

    $default  reduce using rule 58 (multiplicative_expression)


State 139

   56 multiplicative_expression: multiplicative_expression . MULT cast_expression
   57                          | multiplicative_expression . DIV cast_expression
   58                          | multiplicative_expression . PERCENT cast_expression
   60 additive_expression: additive_expression PLUS multiplicative_expression .

    MULT     shift, and go to state 101
    DIV      shift, and go to state 102
    PERCENT  shift, and go to state 103

    $default  reduce using rule 60 (additive_expression)


State 140

   56 multiplicative_expression: multiplicative_expression . MULT cast_expression
   57                          | multiplicative_expression . DIV cast_expression
   58                          | multiplicative_expression . PERCENT cast_expression
   61 additive_expression: additive_expression MINUS multiplicative_expression .

    MULT     shift, and go to state 101
    DIV      shift, and go to state 102
    PERCENT  shift, and go to state 103

    $default  reduce using rule 61 (additive_expression)


State 141

   60 additive_expression: additive_expression . PLUS multiplicative_expression
   61                    | additive_expression . MINUS multiplicative_expression
   63 shift_expression: shift_expression LSHIFT additive_expression .

    PLUS   shift, and go to state 104
    MINUS  shift, and go to state 105

    $default  reduce using rule 63 (shift_expression)


State 142

   60 additive_expression: additive_expression . PLUS multiplicative_expression
   61                    | additive_expression . MINUS multiplicative_expression
   64 shift_expression: shift_expression RSHIFT additive_expression .

    PLUS   shift, and go to state 104
    MINUS  shift, and go to state 105

    $default  reduce using rule 64 (shift_expression)


State 143

   63 shift_expression: shift_expression . LSHIFT additive_expression
   64                 | shift_expression . RSHIFT additive_expression
   68 relational_expression: relational_expression LESS_OR_EQUAL shift_expression .

    LSHIFT  shift, and go to state 106
    RSHIFT  shift, and go to state 107

    $default  reduce using rule 68 (relational_expression)


State 144

   63 shift_expression: shift_expression . LSHIFT additive_expression
   64                 | shift_expression . RSHIFT additive_expression
   69 relational_expression: relational_expression MORE_OR_EQUAL shift_expression .

    LSHIFT  shift, and go to state 106
    RSHIFT  shift, and go to state 107

    $default  reduce using rule 69 (relational_expression)


State 145

   63 shift_expression: shift_expression . LSHIFT additive_expression
   64                 | shift_expression . RSHIFT additive_expression
   67 relational_expression: relational_expression LOGICAL_MORE shift_expression .

    LSHIFT  shift, and go to state 106
    RSHIFT  shift, and go to state 107

    $default  reduce using rule 67 (relational_expression)


State 146

   63 shift_expression: shift_expression . LSHIFT additive_expression
   64                 | shift_expression . RSHIFT additive_expression
   66 relational_expression: relational_expression LOGICAL_LESS shift_expression .

    LSHIFT  shift, and go to state 106
    RSHIFT  shift, and go to state 107

    $default  reduce using rule 66 (relational_expression)


State 147

   66 relational_expression: relational_expression . LOGICAL_LESS shift_expression
   67                      | relational_expression . LOGICAL_MORE shift_expression
   68                      | relational_expression . LESS_OR_EQUAL shift_expression
   69                      | relational_expression . MORE_OR_EQUAL shift_expression
   71 equality_expression: equality_expression LOGICAL_EQUALITY relational_expression .

    LESS_OR_EQUAL  shift, and go to state 108
    MORE_OR_EQUAL  shift, and go to state 109
    LOGICAL_MORE   shift, and go to state 110
    LOGICAL_LESS   shift, and go to state 111

    $default  reduce using rule 71 (equality_expression)


State 148

   66 relational_expression: relational_expression . LOGICAL_LESS shift_expression
   67                      | relational_expression . LOGICAL_MORE shift_expression
   68                      | relational_expression . LESS_OR_EQUAL shift_expression
   69                      | relational_expression . MORE_OR_EQUAL shift_expression
   72 equality_expression: equality_expression LOGICAL_INEQUALITY relational_expression .

    LESS_OR_EQUAL  shift, and go to state 108
    MORE_OR_EQUAL  shift, and go to state 109
    LOGICAL_MORE   shift, and go to state 110
    LOGICAL_LESS   shift, and go to state 111

    $default  reduce using rule 72 (equality_expression)


State 149

   71 equality_expression: equality_expression . LOGICAL_EQUALITY relational_expression
   72                    | equality_expression . LOGICAL_INEQUALITY relational_expression
   74 and_expression: and_expression BITWISE_AND equality_expression .

    LOGICAL_EQUALITY    shift, and go to state 112
    LOGICAL_INEQUALITY  shift, and go to state 113

    $default  reduce using rule 74 (and_expression)


State 150

   74 and_expression: and_expression . BITWISE_AND equality_expression
   76 exclusive_or_expression: exclusive_or_expression BITWISE_XOR and_expression .

    BITWISE_AND  shift, and go to state 114

    $default  reduce using rule 76 (exclusive_or_expression)


State 151

   76 exclusive_or_expression: exclusive_or_expression . BITWISE_XOR and_expression
   78 inclusive_or_expression: inclusive_or_expression BITWISE_OR exclusive_or_expression .

    BITWISE_XOR  shift, and go to state 115

    $default  reduce using rule 78 (inclusive_or_expression)


State 152

   78 inclusive_or_expression: inclusive_or_expression . BITWISE_OR exclusive_or_expression
   80 logical_and_expression: logical_and_expression LOGICAL_AND inclusive_or_expression .

    BITWISE_OR  shift, and go to state 116

    $default  reduce using rule 80 (logical_and_expression)


State 153

   80 logical_and_expression: logical_and_expression . LOGICAL_AND inclusive_or_expression
   82 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .

    LOGICAL_AND  shift, and go to state 117

    $default  reduce using rule 82 (logical_or_expression)


State 154

   84 conditional_expression: logical_or_expression Q_MARK expression . COLON conditional_expression

    COLON  shift, and go to state 188


State 155

   34 postfix_expression: bracketed_identifier LBRACKET RBRACKET .

    $default  reduce using rule 34 (postfix_expression)


State 156

   33 postfix_expression: bracketed_identifier LBRACKET argument_expression_list . RBRACKET
   40 argument_expression_list: argument_expression_list . COMMA expression

    RBRACKET  shift, and go to state 189
    COMMA     shift, and go to state 190


State 157

   39 argument_expression_list: expression .

    $default  reduce using rule 39 (argument_expression_list)


State 158

   13 declaration: INT . init_declarator_list SEMI_COLON
   14            | INT . SEMI_COLON

    LBRACKET    shift, and go to state 6
    SEMI_COLON  shift, and go to state 7
    IDENTIFIER  shift, and go to state 17

    init_declarator_list  go to state 9
    init_declarator       go to state 10
    declarator            go to state 11
    direct_declarator     go to state 12


State 159

  149 return_statement: RETURN . expression SEMI_COLON
  150                 | RETURN . SEMI_COLON

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 191
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 192
    bracketed_identifier       go to state 62


State 160

  113 for_loop: FOR . LBRACKET for_loop_decl_statement RBRACKET compound_statement
  114         | FOR . LBRACKET for_loop_decl_statement RBRACKET statement

    LBRACKET  shift, and go to state 193


State 161

  111 do_while_loop: DO . compound_statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON
  112              | DO . statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 194
    statement                  go to state 195
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 162

  129 if_statement: IF . LBRACKET expression_list RBRACKET compound_statement
  130             | IF . LBRACKET expression_list RBRACKET statement

    LBRACKET  shift, and go to state 196


State 163

  123 while_loop: WHILE . LBRACKET expression_list RBRACKET compound_statement
  124           | WHILE . LBRACKET expression_list RBRACKET statement

    LBRACKET  shift, and go to state 197


State 164

  136 compound_statement: LCURLY RCURLY .

    $default  reduce using rule 136 (compound_statement)


State 165

  148 semi_colon_statement: SEMI_COLON .

    $default  reduce using rule 148 (semi_colon_statement)


State 166

  137 declaration_list: declaration .

    $default  reduce using rule 137 (declaration_list)


State 167

   99 expression_list: expression .

    $default  reduce using rule 99 (expression_list)


State 168

  100 expression_list: expression_list . COMMA expression
  146 expression_statement: expression_list . SEMI_COLON

    COMMA       shift, and go to state 198
    SEMI_COLON  shift, and go to state 199


State 169

  141 statement: loop .

    $default  reduce using rule 141 (statement)


State 170

  110 loop: do_while_loop .

    $default  reduce using rule 110 (loop)


State 171

  108 loop: for_loop .

    $default  reduce using rule 108 (loop)


State 172

  109 loop: while_loop .

    $default  reduce using rule 109 (loop)


State 173

  142 statement: if_block_statement .

    $default  reduce using rule 142 (statement)


State 174

  125 if_block_statement: if_statement .
  126                   | if_statement . else_statement_list

    ELSE  shift, and go to state 200

    ELSE      [reduce using rule 125 (if_block_statement)]
    $default  reduce using rule 125 (if_block_statement)

    else_statement_list  go to state 201
    else_statement       go to state 202


State 175

  145 statement: compound_statement .

    $default  reduce using rule 145 (statement)


State 176

  133 compound_statement: LCURLY declaration_list . statement_list RCURLY
  135                   | LCURLY declaration_list . RCURLY
  138 declaration_list: declaration_list . declaration

    INT             shift, and go to state 158
    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    RCURLY          shift, and go to state 203
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    declaration                go to state 204
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 175
    statement_list             go to state 205
    statement                  go to state 178
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 177

  134 compound_statement: LCURLY statement_list . RCURLY
  140 statement_list: statement_list . statement

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    RCURLY          shift, and go to state 206
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 175
    statement                  go to state 207
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 178

  139 statement_list: statement .

    $default  reduce using rule 139 (statement_list)


State 179

  143 statement: expression_statement .

    $default  reduce using rule 143 (statement)


State 180

  144 statement: semi_colon_statement .

    $default  reduce using rule 144 (statement)


State 181

  147 semi_colon_statement: return_statement .

    $default  reduce using rule 147 (semi_colon_statement)


State 182

  104 fn_params_list: fn_params_list COMMA INT bracketed_identifier .

    $default  reduce using rule 104 (fn_params_list)


State 183

   54 cast_expression: LBRACKET type_name RBRACKET cast_expression .

    $default  reduce using rule 54 (cast_expression)


State 184

   24 initializer: LCURLY initializer_list COMMA RCURLY .

    $default  reduce using rule 24 (initializer)


State 185

   26 initializer_list: initializer_list COMMA initializer .

    $default  reduce using rule 26 (initializer_list)


State 186

   46 unary_expression: SIZEOF LBRACKET INT RBRACKET .

    $default  reduce using rule 46 (unary_expression)


State 187

   32 postfix_expression: postfix_expression LSQUARE expression RSQUARE .

    $default  reduce using rule 32 (postfix_expression)


State 188

   84 conditional_expression: logical_or_expression Q_MARK expression COLON . conditional_expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 99
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 208
    bracketed_identifier       go to state 62


State 189

   33 postfix_expression: bracketed_identifier LBRACKET argument_expression_list RBRACKET .

    $default  reduce using rule 33 (postfix_expression)


State 190

   40 argument_expression_list: argument_expression_list COMMA . expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 209
    bracketed_identifier       go to state 62


State 191

  150 return_statement: RETURN SEMI_COLON .

    $default  reduce using rule 150 (return_statement)


State 192

  149 return_statement: RETURN expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 210


State 193

  113 for_loop: FOR LBRACKET . for_loop_decl_statement RBRACKET compound_statement
  114         | FOR LBRACKET . for_loop_decl_statement RBRACKET statement

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 211
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 212
    bracketed_identifier       go to state 62
    for_loop_decl_statement    go to state 213


State 194

  111 do_while_loop: DO compound_statement . WHILE LBRACKET expression_list RBRACKET SEMI_COLON
  145 statement: compound_statement .

    WHILE  shift, and go to state 214

    WHILE  [reduce using rule 145 (statement)]


State 195

  112 do_while_loop: DO statement . WHILE LBRACKET expression_list RBRACKET SEMI_COLON

    WHILE  shift, and go to state 215


State 196

  129 if_statement: IF LBRACKET . expression_list RBRACKET compound_statement
  130             | IF LBRACKET . expression_list RBRACKET statement

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 216
    bracketed_identifier       go to state 62


State 197

  123 while_loop: WHILE LBRACKET . expression_list RBRACKET compound_statement
  124           | WHILE LBRACKET . expression_list RBRACKET statement

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 217
    bracketed_identifier       go to state 62


State 198

  100 expression_list: expression_list COMMA . expression

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 218
    bracketed_identifier       go to state 62


State 199

  146 expression_statement: expression_list SEMI_COLON .

    $default  reduce using rule 146 (expression_statement)


State 200

  131 else_statement: ELSE . compound_statement
  132               | ELSE . statement

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 219
    statement                  go to state 220
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 201

  126 if_block_statement: if_statement else_statement_list .
  128 else_statement_list: else_statement_list . else_statement

    ELSE  shift, and go to state 200

    ELSE      [reduce using rule 126 (if_block_statement)]
    $default  reduce using rule 126 (if_block_statement)

    else_statement  go to state 221


State 202

  127 else_statement_list: else_statement .

    $default  reduce using rule 127 (else_statement_list)


State 203

  135 compound_statement: LCURLY declaration_list RCURLY .

    $default  reduce using rule 135 (compound_statement)


State 204

  138 declaration_list: declaration_list declaration .

    $default  reduce using rule 138 (declaration_list)


State 205

  133 compound_statement: LCURLY declaration_list statement_list . RCURLY
  140 statement_list: statement_list . statement

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    RCURLY          shift, and go to state 222
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 175
    statement                  go to state 207
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 206

  134 compound_statement: LCURLY statement_list RCURLY .

    $default  reduce using rule 134 (compound_statement)


State 207

  140 statement_list: statement_list statement .

    $default  reduce using rule 140 (statement_list)


State 208

   84 conditional_expression: logical_or_expression Q_MARK expression COLON conditional_expression .

    $default  reduce using rule 84 (conditional_expression)


State 209

   40 argument_expression_list: argument_expression_list COMMA expression .

    $default  reduce using rule 40 (argument_expression_list)


State 210

  149 return_statement: RETURN expression SEMI_COLON .

    $default  reduce using rule 149 (return_statement)


State 211

  118 for_loop_decl_statement: SEMI_COLON . expression_list SEMI_COLON expression_list
  120                        | SEMI_COLON . SEMI_COLON expression_list
  121                        | SEMI_COLON . expression_list SEMI_COLON
  122                        | SEMI_COLON . SEMI_COLON

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 223
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 224
    bracketed_identifier       go to state 62


State 212

  100 expression_list: expression_list . COMMA expression
  115 for_loop_decl_statement: expression_list . SEMI_COLON expression_list SEMI_COLON expression_list
  116                        | expression_list . SEMI_COLON expression_list SEMI_COLON
  117                        | expression_list . SEMI_COLON SEMI_COLON expression_list
  119                        | expression_list . SEMI_COLON SEMI_COLON

    COMMA       shift, and go to state 198
    SEMI_COLON  shift, and go to state 225


State 213

  113 for_loop: FOR LBRACKET for_loop_decl_statement . RBRACKET compound_statement
  114         | FOR LBRACKET for_loop_decl_statement . RBRACKET statement

    RBRACKET  shift, and go to state 226


State 214

  111 do_while_loop: DO compound_statement WHILE . LBRACKET expression_list RBRACKET SEMI_COLON

    LBRACKET  shift, and go to state 227


State 215

  112 do_while_loop: DO statement WHILE . LBRACKET expression_list RBRACKET SEMI_COLON

    LBRACKET  shift, and go to state 228


State 216

  100 expression_list: expression_list . COMMA expression
  129 if_statement: IF LBRACKET expression_list . RBRACKET compound_statement
  130             | IF LBRACKET expression_list . RBRACKET statement

    RBRACKET  shift, and go to state 229
    COMMA     shift, and go to state 198


State 217

  100 expression_list: expression_list . COMMA expression
  123 while_loop: WHILE LBRACKET expression_list . RBRACKET compound_statement
  124           | WHILE LBRACKET expression_list . RBRACKET statement

    RBRACKET  shift, and go to state 230
    COMMA     shift, and go to state 198


State 218

  100 expression_list: expression_list COMMA expression .

    $default  reduce using rule 100 (expression_list)


State 219

  131 else_statement: ELSE compound_statement .
  145 statement: compound_statement .

    ELSE            reduce using rule 131 (else_statement)
    ELSE            [reduce using rule 145 (statement)]
    RETURN          reduce using rule 131 (else_statement)
    RETURN          [reduce using rule 145 (statement)]
    FOR             reduce using rule 131 (else_statement)
    FOR             [reduce using rule 145 (statement)]
    DO              reduce using rule 131 (else_statement)
    DO              [reduce using rule 145 (statement)]
    IF              reduce using rule 131 (else_statement)
    IF              [reduce using rule 145 (statement)]
    WHILE           reduce using rule 131 (else_statement)
    WHILE           [reduce using rule 145 (statement)]
    LBRACKET        reduce using rule 131 (else_statement)
    LBRACKET        [reduce using rule 145 (statement)]
    LCURLY          reduce using rule 131 (else_statement)
    LCURLY          [reduce using rule 145 (statement)]
    RCURLY          reduce using rule 131 (else_statement)
    RCURLY          [reduce using rule 145 (statement)]
    PLUS_PLUS       reduce using rule 131 (else_statement)
    PLUS_PLUS       [reduce using rule 145 (statement)]
    MINUS_MINUS     reduce using rule 131 (else_statement)
    MINUS_MINUS     [reduce using rule 145 (statement)]
    SIZEOF          reduce using rule 131 (else_statement)
    SIZEOF          [reduce using rule 145 (statement)]
    SEMI_COLON      reduce using rule 131 (else_statement)
    SEMI_COLON      [reduce using rule 145 (statement)]
    BITWISE_AND     reduce using rule 131 (else_statement)
    BITWISE_AND     [reduce using rule 145 (statement)]
    MULT            reduce using rule 131 (else_statement)
    MULT            [reduce using rule 145 (statement)]
    PLUS            reduce using rule 131 (else_statement)
    PLUS            [reduce using rule 145 (statement)]
    MINUS           reduce using rule 131 (else_statement)
    MINUS           [reduce using rule 145 (statement)]
    WAVE            reduce using rule 131 (else_statement)
    WAVE            [reduce using rule 145 (statement)]
    EXL_MARK        reduce using rule 131 (else_statement)
    EXL_MARK        [reduce using rule 145 (statement)]
    INTEGER_CONST   reduce using rule 131 (else_statement)
    INTEGER_CONST   [reduce using rule 145 (statement)]
    FLOATING_CONST  reduce using rule 131 (else_statement)
    FLOATING_CONST  [reduce using rule 145 (statement)]
    CHAR_CONST      reduce using rule 131 (else_statement)
    CHAR_CONST      [reduce using rule 145 (statement)]
    IDENTIFIER      reduce using rule 131 (else_statement)
    IDENTIFIER      [reduce using rule 145 (statement)]
    STRING_LITERAL  reduce using rule 131 (else_statement)
    STRING_LITERAL  [reduce using rule 145 (statement)]
    $default        reduce using rule 131 (else_statement)


State 220

  132 else_statement: ELSE statement .

    $default  reduce using rule 132 (else_statement)


State 221

  128 else_statement_list: else_statement_list else_statement .

    $default  reduce using rule 128 (else_statement_list)


State 222

  133 compound_statement: LCURLY declaration_list statement_list RCURLY .

    $default  reduce using rule 133 (compound_statement)


State 223

  120 for_loop_decl_statement: SEMI_COLON SEMI_COLON . expression_list
  122                        | SEMI_COLON SEMI_COLON .

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    $default  reduce using rule 122 (for_loop_decl_statement)

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 231
    bracketed_identifier       go to state 62


State 224

  100 expression_list: expression_list . COMMA expression
  118 for_loop_decl_statement: SEMI_COLON expression_list . SEMI_COLON expression_list
  121                        | SEMI_COLON expression_list . SEMI_COLON

    COMMA       shift, and go to state 198
    SEMI_COLON  shift, and go to state 232


State 225

  115 for_loop_decl_statement: expression_list SEMI_COLON . expression_list SEMI_COLON expression_list
  116                        | expression_list SEMI_COLON . expression_list SEMI_COLON
  117                        | expression_list SEMI_COLON . SEMI_COLON expression_list
  119                        | expression_list SEMI_COLON . SEMI_COLON

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 233
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 234
    bracketed_identifier       go to state 62


State 226

  113 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET . compound_statement
  114         | FOR LBRACKET for_loop_decl_statement RBRACKET . statement

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 235
    statement                  go to state 236
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 227

  111 do_while_loop: DO compound_statement WHILE LBRACKET . expression_list RBRACKET SEMI_COLON

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 237
    bracketed_identifier       go to state 62


State 228

  112 do_while_loop: DO statement WHILE LBRACKET . expression_list RBRACKET SEMI_COLON

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 238
    bracketed_identifier       go to state 62


State 229

  129 if_statement: IF LBRACKET expression_list RBRACKET . compound_statement
  130             | IF LBRACKET expression_list RBRACKET . statement

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 239
    statement                  go to state 240
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 230

  123 while_loop: WHILE LBRACKET expression_list RBRACKET . compound_statement
  124           | WHILE LBRACKET expression_list RBRACKET . statement

    RETURN          shift, and go to state 159
    FOR             shift, and go to state 160
    DO              shift, and go to state 161
    IF              shift, and go to state 162
    WHILE           shift, and go to state 163
    LBRACKET        shift, and go to state 27
    LCURLY          shift, and go to state 122
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    SEMI_COLON      shift, and go to state 165
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 168
    bracketed_identifier       go to state 62
    loop                       go to state 169
    do_while_loop              go to state 170
    for_loop                   go to state 171
    while_loop                 go to state 172
    if_block_statement         go to state 173
    if_statement               go to state 174
    compound_statement         go to state 241
    statement                  go to state 242
    expression_statement       go to state 179
    semi_colon_statement       go to state 180
    return_statement           go to state 181


State 231

  100 expression_list: expression_list . COMMA expression
  120 for_loop_decl_statement: SEMI_COLON SEMI_COLON expression_list .

    COMMA  shift, and go to state 198

    $default  reduce using rule 120 (for_loop_decl_statement)


State 232

  118 for_loop_decl_statement: SEMI_COLON expression_list SEMI_COLON . expression_list
  121                        | SEMI_COLON expression_list SEMI_COLON .

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    $default  reduce using rule 121 (for_loop_decl_statement)

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 243
    bracketed_identifier       go to state 62


State 233

  117 for_loop_decl_statement: expression_list SEMI_COLON SEMI_COLON . expression_list
  119                        | expression_list SEMI_COLON SEMI_COLON .

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    $default  reduce using rule 119 (for_loop_decl_statement)

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 244
    bracketed_identifier       go to state 62


State 234

  100 expression_list: expression_list . COMMA expression
  115 for_loop_decl_statement: expression_list SEMI_COLON expression_list . SEMI_COLON expression_list
  116                        | expression_list SEMI_COLON expression_list . SEMI_COLON

    COMMA       shift, and go to state 198
    SEMI_COLON  shift, and go to state 245


State 235

  113 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET compound_statement .
  145 statement: compound_statement .

    ELSE            reduce using rule 113 (for_loop)
    ELSE            [reduce using rule 145 (statement)]
    RETURN          reduce using rule 113 (for_loop)
    RETURN          [reduce using rule 145 (statement)]
    FOR             reduce using rule 113 (for_loop)
    FOR             [reduce using rule 145 (statement)]
    DO              reduce using rule 113 (for_loop)
    DO              [reduce using rule 145 (statement)]
    IF              reduce using rule 113 (for_loop)
    IF              [reduce using rule 145 (statement)]
    WHILE           reduce using rule 113 (for_loop)
    WHILE           [reduce using rule 145 (statement)]
    LBRACKET        reduce using rule 113 (for_loop)
    LBRACKET        [reduce using rule 145 (statement)]
    LCURLY          reduce using rule 113 (for_loop)
    LCURLY          [reduce using rule 145 (statement)]
    RCURLY          reduce using rule 113 (for_loop)
    RCURLY          [reduce using rule 145 (statement)]
    PLUS_PLUS       reduce using rule 113 (for_loop)
    PLUS_PLUS       [reduce using rule 145 (statement)]
    MINUS_MINUS     reduce using rule 113 (for_loop)
    MINUS_MINUS     [reduce using rule 145 (statement)]
    SIZEOF          reduce using rule 113 (for_loop)
    SIZEOF          [reduce using rule 145 (statement)]
    SEMI_COLON      reduce using rule 113 (for_loop)
    SEMI_COLON      [reduce using rule 145 (statement)]
    BITWISE_AND     reduce using rule 113 (for_loop)
    BITWISE_AND     [reduce using rule 145 (statement)]
    MULT            reduce using rule 113 (for_loop)
    MULT            [reduce using rule 145 (statement)]
    PLUS            reduce using rule 113 (for_loop)
    PLUS            [reduce using rule 145 (statement)]
    MINUS           reduce using rule 113 (for_loop)
    MINUS           [reduce using rule 145 (statement)]
    WAVE            reduce using rule 113 (for_loop)
    WAVE            [reduce using rule 145 (statement)]
    EXL_MARK        reduce using rule 113 (for_loop)
    EXL_MARK        [reduce using rule 145 (statement)]
    INTEGER_CONST   reduce using rule 113 (for_loop)
    INTEGER_CONST   [reduce using rule 145 (statement)]
    FLOATING_CONST  reduce using rule 113 (for_loop)
    FLOATING_CONST  [reduce using rule 145 (statement)]
    CHAR_CONST      reduce using rule 113 (for_loop)
    CHAR_CONST      [reduce using rule 145 (statement)]
    IDENTIFIER      reduce using rule 113 (for_loop)
    IDENTIFIER      [reduce using rule 145 (statement)]
    STRING_LITERAL  reduce using rule 113 (for_loop)
    STRING_LITERAL  [reduce using rule 145 (statement)]
    $default        reduce using rule 113 (for_loop)


State 236

  114 for_loop: FOR LBRACKET for_loop_decl_statement RBRACKET statement .

    $default  reduce using rule 114 (for_loop)


State 237

  100 expression_list: expression_list . COMMA expression
  111 do_while_loop: DO compound_statement WHILE LBRACKET expression_list . RBRACKET SEMI_COLON

    RBRACKET  shift, and go to state 246
    COMMA     shift, and go to state 198


State 238

  100 expression_list: expression_list . COMMA expression
  112 do_while_loop: DO statement WHILE LBRACKET expression_list . RBRACKET SEMI_COLON

    RBRACKET  shift, and go to state 247
    COMMA     shift, and go to state 198


State 239

  129 if_statement: IF LBRACKET expression_list RBRACKET compound_statement .
  145 statement: compound_statement .

    ELSE            reduce using rule 129 (if_statement)
    ELSE            [reduce using rule 145 (statement)]
    RETURN          reduce using rule 129 (if_statement)
    RETURN          [reduce using rule 145 (statement)]
    FOR             reduce using rule 129 (if_statement)
    FOR             [reduce using rule 145 (statement)]
    DO              reduce using rule 129 (if_statement)
    DO              [reduce using rule 145 (statement)]
    IF              reduce using rule 129 (if_statement)
    IF              [reduce using rule 145 (statement)]
    WHILE           reduce using rule 129 (if_statement)
    WHILE           [reduce using rule 145 (statement)]
    LBRACKET        reduce using rule 129 (if_statement)
    LBRACKET        [reduce using rule 145 (statement)]
    LCURLY          reduce using rule 129 (if_statement)
    LCURLY          [reduce using rule 145 (statement)]
    RCURLY          reduce using rule 129 (if_statement)
    RCURLY          [reduce using rule 145 (statement)]
    PLUS_PLUS       reduce using rule 129 (if_statement)
    PLUS_PLUS       [reduce using rule 145 (statement)]
    MINUS_MINUS     reduce using rule 129 (if_statement)
    MINUS_MINUS     [reduce using rule 145 (statement)]
    SIZEOF          reduce using rule 129 (if_statement)
    SIZEOF          [reduce using rule 145 (statement)]
    SEMI_COLON      reduce using rule 129 (if_statement)
    SEMI_COLON      [reduce using rule 145 (statement)]
    BITWISE_AND     reduce using rule 129 (if_statement)
    BITWISE_AND     [reduce using rule 145 (statement)]
    MULT            reduce using rule 129 (if_statement)
    MULT            [reduce using rule 145 (statement)]
    PLUS            reduce using rule 129 (if_statement)
    PLUS            [reduce using rule 145 (statement)]
    MINUS           reduce using rule 129 (if_statement)
    MINUS           [reduce using rule 145 (statement)]
    WAVE            reduce using rule 129 (if_statement)
    WAVE            [reduce using rule 145 (statement)]
    EXL_MARK        reduce using rule 129 (if_statement)
    EXL_MARK        [reduce using rule 145 (statement)]
    INTEGER_CONST   reduce using rule 129 (if_statement)
    INTEGER_CONST   [reduce using rule 145 (statement)]
    FLOATING_CONST  reduce using rule 129 (if_statement)
    FLOATING_CONST  [reduce using rule 145 (statement)]
    CHAR_CONST      reduce using rule 129 (if_statement)
    CHAR_CONST      [reduce using rule 145 (statement)]
    IDENTIFIER      reduce using rule 129 (if_statement)
    IDENTIFIER      [reduce using rule 145 (statement)]
    STRING_LITERAL  reduce using rule 129 (if_statement)
    STRING_LITERAL  [reduce using rule 145 (statement)]
    $default        reduce using rule 129 (if_statement)


State 240

  130 if_statement: IF LBRACKET expression_list RBRACKET statement .

    $default  reduce using rule 130 (if_statement)


State 241

  123 while_loop: WHILE LBRACKET expression_list RBRACKET compound_statement .
  145 statement: compound_statement .

    ELSE            reduce using rule 123 (while_loop)
    ELSE            [reduce using rule 145 (statement)]
    RETURN          reduce using rule 123 (while_loop)
    RETURN          [reduce using rule 145 (statement)]
    FOR             reduce using rule 123 (while_loop)
    FOR             [reduce using rule 145 (statement)]
    DO              reduce using rule 123 (while_loop)
    DO              [reduce using rule 145 (statement)]
    IF              reduce using rule 123 (while_loop)
    IF              [reduce using rule 145 (statement)]
    WHILE           reduce using rule 123 (while_loop)
    WHILE           [reduce using rule 145 (statement)]
    LBRACKET        reduce using rule 123 (while_loop)
    LBRACKET        [reduce using rule 145 (statement)]
    LCURLY          reduce using rule 123 (while_loop)
    LCURLY          [reduce using rule 145 (statement)]
    RCURLY          reduce using rule 123 (while_loop)
    RCURLY          [reduce using rule 145 (statement)]
    PLUS_PLUS       reduce using rule 123 (while_loop)
    PLUS_PLUS       [reduce using rule 145 (statement)]
    MINUS_MINUS     reduce using rule 123 (while_loop)
    MINUS_MINUS     [reduce using rule 145 (statement)]
    SIZEOF          reduce using rule 123 (while_loop)
    SIZEOF          [reduce using rule 145 (statement)]
    SEMI_COLON      reduce using rule 123 (while_loop)
    SEMI_COLON      [reduce using rule 145 (statement)]
    BITWISE_AND     reduce using rule 123 (while_loop)
    BITWISE_AND     [reduce using rule 145 (statement)]
    MULT            reduce using rule 123 (while_loop)
    MULT            [reduce using rule 145 (statement)]
    PLUS            reduce using rule 123 (while_loop)
    PLUS            [reduce using rule 145 (statement)]
    MINUS           reduce using rule 123 (while_loop)
    MINUS           [reduce using rule 145 (statement)]
    WAVE            reduce using rule 123 (while_loop)
    WAVE            [reduce using rule 145 (statement)]
    EXL_MARK        reduce using rule 123 (while_loop)
    EXL_MARK        [reduce using rule 145 (statement)]
    INTEGER_CONST   reduce using rule 123 (while_loop)
    INTEGER_CONST   [reduce using rule 145 (statement)]
    FLOATING_CONST  reduce using rule 123 (while_loop)
    FLOATING_CONST  [reduce using rule 145 (statement)]
    CHAR_CONST      reduce using rule 123 (while_loop)
    CHAR_CONST      [reduce using rule 145 (statement)]
    IDENTIFIER      reduce using rule 123 (while_loop)
    IDENTIFIER      [reduce using rule 145 (statement)]
    STRING_LITERAL  reduce using rule 123 (while_loop)
    STRING_LITERAL  [reduce using rule 145 (statement)]
    $default        reduce using rule 123 (while_loop)


State 242

  124 while_loop: WHILE LBRACKET expression_list RBRACKET statement .

    $default  reduce using rule 124 (while_loop)


State 243

  100 expression_list: expression_list . COMMA expression
  118 for_loop_decl_statement: SEMI_COLON expression_list SEMI_COLON expression_list .

    COMMA  shift, and go to state 198

    $default  reduce using rule 118 (for_loop_decl_statement)


State 244

  100 expression_list: expression_list . COMMA expression
  117 for_loop_decl_statement: expression_list SEMI_COLON SEMI_COLON expression_list .

    COMMA  shift, and go to state 198

    $default  reduce using rule 117 (for_loop_decl_statement)


State 245

  115 for_loop_decl_statement: expression_list SEMI_COLON expression_list SEMI_COLON . expression_list
  116                        | expression_list SEMI_COLON expression_list SEMI_COLON .

    LBRACKET        shift, and go to state 27
    PLUS_PLUS       shift, and go to state 29
    MINUS_MINUS     shift, and go to state 30
    SIZEOF          shift, and go to state 31
    BITWISE_AND     shift, and go to state 32
    MULT            shift, and go to state 33
    PLUS            shift, and go to state 34
    MINUS           shift, and go to state 35
    WAVE            shift, and go to state 36
    EXL_MARK        shift, and go to state 37
    INTEGER_CONST   shift, and go to state 38
    FLOATING_CONST  shift, and go to state 39
    CHAR_CONST      shift, and go to state 40
    IDENTIFIER      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42

    $default  reduce using rule 116 (for_loop_decl_statement)

    CONSTANT                   go to state 43
    primary_expression         go to state 45
    postfix_expression         go to state 46
    unary_expression           go to state 47
    UNARY_OPERATOR             go to state 48
    cast_expression            go to state 49
    multiplicative_expression  go to state 50
    additive_expression        go to state 51
    shift_expression           go to state 52
    relational_expression      go to state 53
    equality_expression        go to state 54
    and_expression             go to state 55
    exclusive_or_expression    go to state 56
    inclusive_or_expression    go to state 57
    logical_and_expression     go to state 58
    logical_or_expression      go to state 59
    conditional_expression     go to state 60
    assignment_expression      go to state 72
    expression                 go to state 167
    expression_list            go to state 248
    bracketed_identifier       go to state 62


State 246

  111 do_while_loop: DO compound_statement WHILE LBRACKET expression_list RBRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 249


State 247

  112 do_while_loop: DO statement WHILE LBRACKET expression_list RBRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 250


State 248

  100 expression_list: expression_list . COMMA expression
  115 for_loop_decl_statement: expression_list SEMI_COLON expression_list SEMI_COLON expression_list .

    COMMA  shift, and go to state 198

    $default  reduce using rule 115 (for_loop_decl_statement)


State 249

  111 do_while_loop: DO compound_statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON .

    $default  reduce using rule 111 (do_while_loop)


State 250

  112 do_while_loop: DO statement WHILE LBRACKET expression_list RBRACKET SEMI_COLON .

    $default  reduce using rule 112 (do_while_loop)
